<?php

  /**
   *
   *
   */

  namespace fibe\Bundle\WWWConfBundle\Repository;

  use Doctrine\ORM\EntityRepository;
  use Doctrine\Common\Collections\Criteria;

  /**
   * PaperRepository
   *
   * This class was generated by the Doctrine ORM. Add your own custom
   * repository methods below.
   */
  class PaperRepository extends EntityRepository
  {


    /**
     * @TODO comment
     *
     * @param null $entity
     *
     * @return mixed
     */
    public function getPaperForSelect($entity = null)
    {
      //Recuperation des ids des paper etant deja liÃ© a l'event
      $papers_id = array();
      if ($entity)
      {
        foreach ($entity->getPapers() as $paper)
        {
          array_push($papers_id, $paper->getId());
        }
      }

      $qb = $this->createQueryBuilder('p');
      $qb ->select(array('p.id', 'p.title'))
        ->andWhere($qb->expr()->notIn('p.id', $papers_id));
      $query = $qb->getQuery();
      $papers = $query->execute();
      return $papers;
    }


    /**
     * @TODO comment
     *
     * @param $params
     * @param $currentConf
     *
     * @return mixed
     */
    public function filtering($params, $currentConf)
    {

      $entities = array();
      $qb = $this->createQueryBuilder('p');
      $qb
        ->where('p.conference = :conference_id')
        ->setParameter('conference_id', $currentConf->getId());

      if (isset($params['id']))
      {
        $qb
          ->andWhere('p.id = :id')
          ->setParameter('id', $params['id']);
      }

      if (isset($params['author']))
      {
        $qb
          ->leftJoin('p.authors', 'au')
          ->andWhere('au.id = :author_id')
          ->setParameter('author_id', $params['author']);
      }

      if (isset($params['topic']))
      {
        $qb
          ->leftJoin('p.topics', 't')
          ->andWhere('t.id = :topic_id')
          ->setParameter('topic_id', $params['topic']);

      }

      $query = $qb->getQuery();
      return $query->execute();

    }

    /**
     * getOrderedQueryBuilder
     *
     * @return Object QueryBuilder
     */
    public function getOrderedQueryBuilder()
    {
      $qb = $this->createQueryBuilder('loc');
      $qb->orderBy('loc.title', 'ASC');

      return $qb;
    }

    /**
     * getOrderedQuery
     *
     * @return Object Query
     */
    public function getOrderedQuery()
    {
      $qb = $this->getOrderedQueryBuilder();

      return is_null($qb) ? $qb : $qb->getQuery();
    }

    /**
     * getOrdered
     *
     * @return Object DoctrineCollection
     */
    public function getOrdered()
    {
      $q = $this->getOrderedQuery();

      return is_null($q) ? array() : $q->getResult();
    }

    /**
     * extractQueryBuilder
     *
     * @param array $params
     *
     * @return Object QueryBuilder
     */
    public function extractQueryBuilder($params)
    {
      $qb = $this->getOrderedQueryBuilder();

      if (isset($params['id']))
      {
        $qb
          ->andWhere('loc.id = :id')
          ->setParameter('id', $params['id']);
      }

      if (isset($params['ids']))
      {
        $qb
          ->andWhere($qb->expr()->in('loc.id', $params['ids']));
      }

      if (isset($params['title']))
      {
        $qb
          ->andWhere('loc.title = :title')
          ->setParameter('title', $params['title']);
      }

      if (isset($params['author_id']))
      {
        $qb
          ->leftJoin('loc.authors', 'au')
          ->andWhere('au.id = :author_id')
          ->setParameter('author_id', $params['author_id']);
      }

      if (isset($params['topic_id']))
      {
        $qb
          ->leftJoin('loc.topics', 'top')
          ->andWhere('top.id = :topic_id')
          ->setParameter('topic_id', $params['topic_id']);
      }

      if (isset($params['conference_id']))
      {
        $qb
          ->andWhere('loc.conference = :conference_id')
          ->setParameter('conference_id', $params['conference_id']);
      }

      return $qb;
    }

    /**
     * extractQuery
     *
     * @param array $params
     *
     * @return Object Query
     */
    public function extractQuery($params)
    {
      $qb = $this->extractQueryBuilder($params);

      return is_null($qb) ? $qb : $qb->getQuery();
    }

    /**
     * extract
     *
     * @param array $params
     *
     * @return Object DoctrineCollection
     */
    public function extract($params)
    {
      $q = $this->extractQuery($params);

      return is_null($q) ? array() : $q->getResult();
    }


  }
