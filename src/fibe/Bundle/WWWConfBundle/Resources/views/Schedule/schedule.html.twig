{% extends 'fibeWWWConfBundle::base.html.twig' %}


{% block title %}Schedule{% endblock title %}




{% block body %} 
  {{ parent() }}
      

<div id='calendar'></div> 
<div id="sidebar">  
  <h4>Filter by category</h4>
  <div id='filter-category'>
  </div>
  <h4>Filter by location</h4>
  <div id='filter-location'>
  </div>
  <h4>Dateless Events</h4>
  <div id='external-events'>
  </div>
</div>  


<div id="modal"  class="modal fade">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h4 class="modal-title">Edit event</h4>
      </div>
      <div class="modal-body">
        <p>One fine body&hellip;</p>
      </div> 
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
 
<div id="modal-new-event"  class="modal fade">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h4 class="modal-title">New event</h4>
      </div>
      <form>
        <div class="modal-body">
          <div class="input-group input-group-lg"> 
            <input name="name" id="name" type="text" class="form-control input-lg" value="New event" placeholder="New event">
          </div>
          <div class="input-group input-group-lg">
            <span class="input-group-addon">Parent</span>
            <select name="parent_id" id="parent_id" class="form-control input-lg"></select>
          </div>
        </div>
        <div class="modal-footer">
          <a  class="btn btn-default" data-dismiss="modal">Close</a>
          <button type="submit" class="btn btn-primary">Save changes</button>
        </div>
      </form>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
 
<div id="modal-set-parent"  class="modal fade">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h4 class="modal-title"><i class='icon-sitemap icon-large'></i> Affect parent</h4>
      </div>
        <div class="modal-body">
          <div class="modal-body">
            Set 
            <p class="sub-event event-name"></p> 
            as sub event of 
            <p class="super-event event-name"></p>
            ?
          </div>
        </div>
      
      <div class="modal-footer row-fluid">
        <div class="col-lg-6"><button class="col-md-6 btn btn-default btn-block no" data-dismiss="modal"><i class='icon-remove'></i> no</button></div>
        <div class="col-lg-6"><button class="col-md-6 btn btn-success btn-block yes" data-dismiss="modal"><i class='icon-ok'></i> ok</button></div>
      </div>

    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
 


{% endblock %}



 {% block stylesheets %}
  {{ parent() }}
 
    <!--
    <link rel='stylesheet' type='text/css' href='http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.2/themes/start/jquery-ui.css' />
    --> 

<link href="{{ asset('bundles/fibewwwconf/js/fullcalendar/fullcalendar.css') }}" rel='stylesheet' />
<link href="{{ asset('bundles/fibewwwconf/js/fullcalendar/fullcalendar.print.css') }}" rel='stylesheet' media='print' />
    <style type="text/css">
        
    .navbar { 
      margin-bottom: 0; 
    }
    #calendar {  
        width  : 80%; 
        margin : 0;
        padding: 1em;
        float  : left
    }
        
    #sidebar {   
        padding   : 1em 0.5em;
        /*height  : 100%; */
        width     : 20%;
        padding   : 0 10px; 
        background: #eee;
        z-index   : 1;
        float     : right;
    }
        
    #sidebar h4 {
        font-size  : 16px;
        margin-top : 0;
        padding-top: 1em;
    }
        
    #sidebar p {
        margin   : 1.5em 0;
        font-size: 11px;
        color    : #666;
    }
        
    #sidebar p input {
        margin        : 0;
        vertical-align: middle;
    } 

    #external-events{
        border        : 1px solid #ccc;
        padding       : 1em 0.5em;
        margin        : 0;
        margin-bottom : 1em;
        position      : relative; 
        z-index       : 2; 
        /*overflow-y    :    auto;*/
        height        : 100%;  /*sidebar h4 height*/

    }
        
    .external-event { /* try to mimick the look of a real event */
        margin-bottom: 1em;
        padding      : 2px 4px;
        background   : #3366CC;
        color        : #fff;
        font-size    : .85em;
        cursor       : pointer;
    }
    #modal .modal-dialog { 
        width: 90%; 
    }  
    #modal-set-parent .modal-body { 
      /*text-align: center; */
    }
    #calendar table { table-layout: fixed; }
    .event-name { 
      margin:2em;
      font-weight: bolder;
      font-size: 18px;
    }
  .fc-view { /* prevents dragging outside of widget */
      overflow: visible;
  }


    </style>

{% endblock stylesheets %}



{%  block javascripts %}   
  {{ parent() }} 
<script src="{{ asset('bundles/fibewwwconf/js/moment.min.js') }}" type="text/javascript" ></script>
     
<script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/jquery-ui-1.10.3.custom.min.js') }}"></script>
<script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/fullcalendar.js') }}"></script>

    
    <script type="text/javascript">
        $(document).ready(function() {    
 
            //event edit popup
            var $modal = $('#modal').hide();
            var $modalNewEvent = $('#modal-new-event').hide();
            var $modalSetParent = $('#modal-set-parent').hide();
            var $modalBody = $modal.find(".modal-body");
            var $modalNewEventBody = $modalNewEvent.find(".modal-body");
            var $calendar = $('#calendar');
            var $sidebar = $('#external-events');

           // calcule du premier jour
            var firstDay = moment('5000-10-10');
            {% for event in currentConf.confEvents %}
                {% if date(event.startAt) > date("1980-01-02") %}
                    
                    if(moment('{{event.startAt|date("Y-m-d")}}').isBefore(firstDay)){
                        firstDay = moment('{{event.startAt|date("Y-m-d")}}');
                    }

                {% endif %}
            {% endfor %}
            if(firstDay.isSame(moment('5000-10-10'))) firstDay = moment();

            
            //path
            var DATA_FEED_URL = "{{ path('schedule_view_event_get') }}";

            var op = {  
                getOrderedUrl     : "{{ path('exporter_api', { 'entity_reference': 'schedule_event','_format': 'json' }) }}",
                updateUrl     : "{{ path('schedule_view_event_edit') }}", //event modal form
                quickAddUrl   : DATA_FEED_URL + "?method=add", 
                quickUpdateUrl: DATA_FEED_URL + "?method=update",
                quickDeleteUrl: DATA_FEED_URL + "?method=remove",  

            };

        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- initialize filters --------------------------------------------*/
        /*-----------------------------------------------------------------------------------------------------*/
 
 
      var categories = [] ;
      {% for category in categories %} 
        categories.push({
          id   : "{{category.id}}",
          name : "{{category.name}}",
          color: "{{category.color}}", 
        }) 
      {% endfor %}
      var locations= []  ;
      {% for location in locations %} 
        locations.push({
          id   : "{{location.id}}",
          name : "{{location.name}}",
          color: "{{location.description}}", 
        }) 
      {% endfor %}

      // console.log(categories,locations);
 
      var $categoryCtn = $('#filter-category').html("");
      var $locationCtn = $('#filter-location').html(""); 
      var $categorySelect = $('<select name="filter_category_select" id="filter_category_select" class="form-control" ><option value="*">See all</option></select>')
                                  .appendTo($categoryCtn)
                                  .change(function(){
                                    var data = $(this).val()=='*' ? {} : { category_id: $(this).val() };
                                    $.get(
                                      op.getOrderedUrl,
                                      data,
                                      function(events) {  
                                          bootstrapAlert("success","event has been well fetched" );
                                          renderEvent(events);
                                          //$calendar.fullCalendar('renderEvent',e  ); // 3rd arg make the event "stick" 
                                      },
                                      'json'
                                    );
                                    bootstrapAlert("info","Request sent for categorie "+ $(this).find("option[value='"+$(this).val()+"']").text(),"Info : ","<i class='icon-spinner icon-spin'></i>"); 
                                  });
      var $locationSelect = $('<select name="filter_location_select" id="filter_location_select" class="form-control" ><option value="*">See all</option></select>')
                                  .appendTo($locationCtn)
                                  .change(function(){
                                    var data = $(this).val()=='*' ? {} : { location_id: $(this).val() };
                                    $.get(
                                      op.getOrderedUrl,
                                      data,
                                      function(events) {  
                                          bootstrapAlert("success","event has been well fetched" );
                                          renderEvent(events);
                                          //$calendar.fullCalendar('renderEvent',e  ); // 3rd arg make the event "stick" 
                                      },
                                      'json'
                                    );
                                    bootstrapAlert("info","Request sent for location "+ $(this).find("option[value='"+$(this).val()+"']").text(),"Info : ","<i class='icon-spinner icon-spin'></i>");  
                                  });


      for(var i =0; i < categories.length;i++){
        $categorySelect.append('<option value="'+categories[i].id+'">'+categories[i].name+'</option>');
      }
      for(var i =0; i < locations.length;i++){
        $locationSelect.append('<option value="'+locations[i].id+'">'+locations[i].name+'</option>');
      }

        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- end initialize filters ----------------------------------------*/ 
        /*-----------------------------------------------------------------------------------------------------*/
 
        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- initialize the calendar ---------------------------------------*/
        /*-----------------------------------------------------------------------------------------------------*/
        var dragged = null;
        $calendar.fullCalendar({ 
            header: {
                left: 'prev,next today',
                center: 'title',
                right: 'month,agendaWeek,agendaDay'
            }, 
            editable: true,
            //fist day
            year: firstDay.year(), 
            month: firstDay.month(),
            date: firstDay.date(),
            //get events
            events: function(start, end, callback) { 
              $.get(
                op.getOrderedUrl,
                {},
                function(events) {  
                    bootstrapAlert("success","event has been well fetched" );
                    renderEvent(events);
                    //$calendar.fullCalendar('renderEvent',e  ); // 3rd arg make the event "stick" 
                },
                'json'
              ); 
              bootstrapAlert("info","event request sent","","<i class='icon-spinner icon-spin'></i>");
            },  
            eventClick: function(calEvent, jsEvent, view) { 
  
                    $.ajax({
                        url: op.updateUrl+"?id="+calEvent.id,  
                        success: function(doc) {  
                            $modal.modal("show");
                            $modalBody.html(doc);
                            bootstrapAlert("stop");
                        }
                    });
                    bootstrapAlert("info","edit request sent","Info : ","<i class='icon-spinner icon-spin'></i>"); 

            },
            selectable: true, 
            selectHelper: true,
            select: function(start, end, allDay) { //new event
                $modalNewEvent.modal("show");
                var selectHtml='';
                $.each($calendar.fullCalendar('clientEvents'),function(){
                  selectHtml += '<option value="'+this.id+'">'+this.title+'</option> ' 
                });
                $modalNewEvent.find("select").html(selectHtml);
                $modalNewEvent.find("form").submit(function(e){ 
                  var title = $(this).find("#name").val();
                  var parent_id = $(this).find("#parent_id").val(); 
                  if (title && parent) {
                      var e = {
                          title: title,
                          parent: {id:parent_id},
                          children: [],
                          start: start,
                          end: end,
                          allDay: allDay
                      };
                      $.post(
                              op.quickAddUrl,
                              formatDate($.extend( {} , e )),
                              function(response) {  
                                  bootstrapAlert("success","event has been well added");
                                  e.id=response.id;
                                  $calendar.fullCalendar('renderEvent',e); // 3rd arg make the event "stick" 
                              },
                              'json'
                      );
                      bootstrapAlert("info","add request sent","Info : ","<i class='icon-spinner icon-spin'></i>");
                  }
                  $modalNewEvent.modal("hide");
                  return false;
                })
                $calendar.fullCalendar('unselect');
            },
            eventResize: function(event,dayDelta,minuteDelta,revertFunc) {

                    updateEventInDB(event);
            },
            eventDataTransform: function(data){return data;},
            editable: true,
            droppable: true, // this allows things to be dropped onto the calendar !!!
            eventDrop : function(event){ //drop from calendar ")
                    updateEventInDB(event);
            }, 
            eventAfterAllRender: function( view ) {
              // alert("eventAfterRender")
              reposition(view);
            }, 
            drop: function(date, allDay) { //drop from sidebar
            
                // retrieve the dropped element's stored Event Object
                var originalEventObject = $(this).data('eventObject');
                
                // we need to copy it, so that multiple events don't have a reference to the same object
                var copiedEventObject = $.extend({}, originalEventObject);
                
                // assign it the date that was reported 
                copiedEventObject['start']  = date;
                copiedEventObject.allDay = allDay; 
                formatDate(copiedEventObject);

                endDragChildrenFromSidebar(copiedEventObject);
                deleteParent(copiedEventObject);
                
                updateEventInDB(copiedEventObject );
                // render the event on the calendar
                // the third `true` argument determines if the event "sticks" (http://arshaw.com/fullcalendar/docs/event_rendering/renderEvent/)
                $calendar.fullCalendar('renderEvent', copiedEventObject);
                
                $(this).remove();  
            },
            eventDragStart: function( event, jsEvent, ui, view ) { 
              dragged = [ ui.helper[0], event ];
              setTimeout(function(){ //bug... event isn't yet updated 
              dragChildren(event, jsEvent, ui, view);
              },1);//bug... event isn't yet updated 
              
            },
            eventDragStop: function( event, jsEvent, ui, view ) {  
                dragged = [ ui.helper[0], event ]; 
                //save children to db
              setTimeout(function(){ //bug... event isn't yet updated 
                endDragChildren(event );
              },1);//bug... event isn't yet updated 
            },
            eventRender : function( event, element, view ) {
              setTooltip(element,event);

            }
        }); 
        $calendar.fullCalendar('changeView', "agendaWeek" );
        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- end initialize the calendar -----------------------------------*/
        /*-----------------------------------------------------------------------------------------------------*/
 

        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- initialize the sidebar ----------------------------------------*/
        /*-----------------------------------------------------------------------------------------------------*/
        function setInstantEvents(instant_events){
          $sidebar.html("");  
          var eventHtml =  "<div class='external-event fc-event-draggable'></div>";
          var $sidebarTmp = $(eventHtml).prependTo($sidebar).hide();
          
          //set sidebar bubble draggable
          for (var i in instant_events){ 
            var $event = $(eventHtml);
            $event = sidebarDraggable($event,instant_events[i]);
          }

          //set sidebar droppable
          $sidebar.droppable({
            over: function( event, ui ) {  
                if( event && $(ui.draggable).hasClass("fc-event-draggable")) {
                    var event = dragged[1];
                    $(this).css("border-color","green"); 
                    sidebarEventHtml($sidebarTmp,event)
                    $sidebarTmp.show() ;
                }
            },
            out: function( event, ui ) { 
                if($(ui.draggable).hasClass("fc-event-draggable")) {
                    $(this).css("border","solid 1px #ccc"); 
                    $sidebarTmp.hide();
                } 
            },
            drop: function( event, ui ) { 
              if ( dragged && ui.helper && ui.helper[0] === dragged[0]){
                //update ui
                $sidebarTmp.hide();
                $(this).css("border","solid 1px #ccc"); 

                console.log("endDragOn sideBar") ;

                var event = dragged[1]; 
                //delete parent relation

                deleteParent(event);

                setSidebarEvent(event);

                //affect children
                var element = $(ui.helper[0]);
                var children = getChildren(element,event, true); //third event for recursiveness
                $.each(children,function(i,child){
                  setSidebarEvent(child.event); 
                });
              }
            }
          });

          function sidebarDraggable($event,event){
            $event.appendTo($sidebar);
            sidebarEventHtml ($event,event);
            $event.prepend("<span class='fc-event-id ' style='color:grey;'>"+event.id+"</span>");
            //set child drag


            
            $event.draggable({
                      zIndex: 999,
                      revert: true,      // will cause the event to go back to its
                      revertDuration: 0,  //  original position after the drag
                      start : function (ev,ui){
                            dragged = [ ui.helper[0], event ];
                          setTimeout(function(){ //bug... event isn't yet updated  
                            dragChildren(event);
                          },1);//bug... event isn't yet updated   
                      }
                    })
                    .data('eventObject', event);
            // store the Event Object in the DOM element so we can get to it later
            return $event;
          }

          
          function setSidebarEvent(event){
            //set as instant event 
            event['end'] = moment(event['start']); 
            formatDate(event) 
            // remove event from calendar 
            $calendar.fullCalendar('removeEvents',event.id);
            var $event = $(eventHtml);
            var $event = sidebarDraggable($event,event);
            updateEventInDB(event);  
          }

          function sidebarEventHtml ($event,event){
            $event.html(event.title);
            $event.css({
                      "background-color": event.color,
                      "border-color": event.border_color || event.color,
                   });  
          }
        }



        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- end initialize the sidebar ------------------------------------*/ 
        /*-----------------------------------------------------------------------------------------------------*/

        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- parent/child  -------------------------------------------------*/
        /*-----------------------------------------------------------------------------------------------------*/

        //drag event from calendar
        //highlight 
        function setTooltip(element,event){
          var oldBorderColor = element.css("border-color");
          var overBorderColor = "green";
          element.droppable({
            over: function( ev, ui ) {
                $(this).css("border-color",overBorderColor);
            },
            out: function( ev, ui ) { 
                $(this).css("border-color",oldBorderColor);  
            },
            drop: function( ev, ui ) { 
              if ( dragged && ui.helper && ui.helper[0] === dragged[0]){
                $(this).css("border-color",oldBorderColor);  

                var draggedEvent = dragged[1];
                if(draggedEvent.parent.id == event.id){
                  // already sub-event
                  return;
                }

                //check if it's going to do a loop in the tree
                if(isChild(draggedEvent,event)){
                  bootstrapAlert("stop");
                  bootstrapAlert("error","cannot set event <b>"+event.title+"</b> as child of <b>"+parent.title+"</b> because this is going to do a loop in the event tree","Circular reference : "); 
            
                  return;
                }

                $modalSetParent.modal('show').find(".sub-event").html(draggedEvent.title);
                $modalSetParent.modal('show').find(".super-event").html(event.title);

                $modalSetParent.find('button.yes').off("click").click(function(){

                  //set parent and children relation
                  setParent(draggedEvent,event);
                  updateEventInDB(draggedEvent); 
                });  
              }
            }
          }); 
        }

        var draggedProp,draggedStart,children;

        function dragChildren(event){
          var parentElement = dragged[0];
          draggedProp =  getProp(parentElement); 
          draggedStart = moment(event['start']);
          // console.log(event['start'])
          // console.log(draggedProp)
          // console.log("parentElement",parentElement.text(),parentElement)
          children = getChildren(parentElement,event, true); //third event for recursiveness
          console.log("###children",children)
          $.each(children,function(i,child){ 
            $(child.element).fadeTo(200, 0.5);
          });
          // console.log("lol ",children);

          //update helper
          $(parentElement).off("mousemove").mousemove( function(ev){ 
            var newdraggedProp = getProp(parentElement);
            var diff = { 
              x : (draggedProp.x - newdraggedProp.x) , 
              y : (draggedProp.y - newdraggedProp.y)
            }; 
            if(diff.x != 0  || diff.y != 0 ){
              draggedProp =  newdraggedProp;  

              $.each(children,function(i,child){
                 // console.log(child)
                var childProp = getProp(child.element);
                // console.log("lol ",childProp);
                $(child.element).css("left",childProp.x-diff.x+"px")
                                .css("top",childProp.y-diff.y+"px");
              });
            }
          }); 
        }
        // set blockwidth

        /***************    position    ******************/
        /***************    position    ******************/
        /***************    position    ******************/
        /***************    position    ******************/
        /***************    position    ******************/
        /***************    position    ******************/
        /***************    position    ******************/ 

        function reposition(view){ 
          var colWidth = view.getColWidth();
          console.log("#reposition#");
          var positionnedEvent = [];

          var events = $calendar.fullCalendar('clientEvents'); //loop only on calendar events

          for (var i in events){
            var event = events[i]; 
            if($.inArray(event.id, positionnedEvent)>-1)continue;

            event = getElementAndEvent(event.id).event; 

            // get toppest parent 
            while(hasParent(event)){ 
              event = getElementAndEvent(event.parent.id);
              if(!event) return false; //not all event were not all loaded
              event = event.event;
            }
            //toppest parent
            event = getElementAndEvent(event.id).event;
            console.log("toppest parent",event.id);

            //TODO
            //TODO
            //TODO redim width
            //TODO 
            //TODO positionnedEvent.push(child.id);
            //TODO
            //TODO
            //TODO
            positionnedEvent.push(event.id);
          }
 
        }

        /***************    position    ******************/
        /***************    position    ******************/
        /***************    position    ******************/
        /***************    position    ******************/
        /***************    position    ******************/
        /***************    position    ******************/
        /***************    position    ******************/

        function endDragChildren(event){
      
          console.log("endDragChildren")
          //get diff
          var diff = moment(draggedStart).diff(moment(event['start'])); 
          //apply to children
          $.each(children,function(i,child){
 
            // console.log("#draggin child : ",child );
            var childEvent = child.event;
             
            childEvent['start']  = moment(childEvent['start']).subtract(diff);
            childEvent['end']  = moment(childEvent['end'] || childEvent['start']).subtract(diff);
            render(childEvent); 
          });

          //check if the event has been dropped out of the parent 
          if(isOutOfParent(event)){
              //event dropped out of parent
              console.log(" #### moved out ####"); 
              deleteParent(event); 
              updateEventInDB(event); 
            } 
          
        }
        function isOutOfParent(event){
          if(!hasParent(event))return false;
          var parent = getElementAndEvent(event.parent.id)
          return (moment(parent.event['start']).isAfter(event['start']) ||
                  moment(parent.event['end']).isBefore(event['end'])) 
        }
        var lastMoment
        function endDragChildrenFromSidebar(event){
           
          var elem = getDivById(event.id);    

          var children = getChildren(elem,event, false); //third event for recursiveness 

          lastMoment = moment(event['start']);   
          event['start']  = moment(lastMoment).format(); 
          // lastMoment = lastMoment.add("minutes",30);
          formatDate(event) 
          updateEventInDB(event); 
          if( children) {
            for(var i in children){
              setChildDate(children[i]); 
            } 
          }else{
              
              lastMoment = lastMoment.add("hours",1);
            }
          event['end'] = moment(lastMoment).add("minutes",30).format() ;
          deleteParent(event);
          console.log("event['end']",event['end'])



          function setChildDate(event){

            event.event['start']  = moment(lastMoment).format();
            // lastMoment = lastMoment.add("minutes",30);

            if( event.subChildren){
              for(var i in event.subChildren){
                setChildDate(event.subChildren[i]); 
              }
            }else{
              
              lastMoment = lastMoment.add("hours",1);
            }

            // lastMoment = lastMoment.add("minutes",30);

            event.event['end']  = moment(lastMoment).format();  
            formatDate(event.event)

            updateEventInDB(event.event); 

            event.element.remove();  
             $calendar.fullCalendar('renderEvent', event.event); 
 
          } 
        }


        /** 
         * @param parentElement :  $.eventDiv
         * @param parent        :  db model event
         * @param concat        : ( boolean ) if true : dont preserve the tree nature of the relation (just concat them)
         * return children      : [{event:event,element:$element}, ... ]
         * events               : db modele events
         * elements             : jquery draggable div array;
         */
        function getChildren(parentElement,parent,concat){
          var children = [];
          // console.log("getChildren",parent)
          $.each(parent.children,function(i,child){
            if( !parent.children.hasOwnProperty( i ) ) return; 
            var c = getElementAndEvent(child.id);
            if( !c) return;  
            var subChildren = getChildren(c.element,c.event,concat);

            if(concat)
              children = children.concat(subChildren);
            else{
              if (subChildren.length > 0)
              c['subChildren'] = subChildren;
            }


            children.push(c);  

          }) 
          return children;
        }

        /** 
         * return children = [{event:event,element:$element}, ... ]
         * events   : db model events
         * elements : jquery draggable div array;
         */
        function getElementAndEvent(id){ 
          if(id=="" || !id)return ;
            var event = $calendar.fullCalendar( 'clientEvents', id )[0]; 

            //look in sidebar event if not found
            if(!event){
              $(".external-event").each(function(i,sidebarEvent){
                if( event)return;
                var ev = $.extend({},$(sidebarEvent).data('eventObject'));
                // console.log("##",ev )
                if(ev && ev.id == id ){
                 console.log("##FOUND IN SIDEBAR##",ev.id,ev)
                  event = ev; 
                }
              })
            }
          if(!event)return;
            // console.log("##",event ) 
            var elem = getDivById(event.id); 
            // console.log("##",elem ) 
            return {event:event,element:$(elem)}
        }  
        /**
        * get div with hidden div containing event id
        * <div class='fc-event-id hide'>event.id</div>
        */

        function getDivById(id){
            var div;
            $.each($(".fc-event-draggable"),function(i,childDiv){
              if(div)return false; //break each
              //check with id
              $.each($(childDiv).find(".fc-event-id"),function(){
                if(div)return false; //break each
                var childId = $(this).text();
                if(childId ==  id){
                  div =  $(childDiv);
                }else{
                  // console.log("bad id for event to be a child");
                  // console.log(id +" != "+childId); 
                }
              }); 
            });
            return div;
        }

        // remove relation with old parent if exists
        // and update relation with new parent
        function setParent(event,parent){


          var elem = getDivById(event.id);
          var children = getChildren(elem,event, true);


          //get full event info
          if(!parent['start']){
            parent = getElementAndEvent(parent.id).event;
          }
          if(!event['start']){
            parent = getElementAndEvent(event.id).event;
          } 
          deleteParent(event);
          //check if this is going to do a loop in the tree 
          if(isChild(parent,event)){
            bootstrapAlert("error","cannot set event <b>"+event.title+"</b> as child of <b>"+parent.title+"</b> because this is going to do a loop in the event tree","Circular reference : "); 
            return;
          }
 
          //affect parent to child
          event.parent = { "id": parent.id};
          //add child to parent
          parent.children.push( { "id": event.id});  

          //update parentDate
          updateParentDate(event);
           
        }

        function updateParentDate(event){ 

          //check if the event has been dropped out of the parent 
          if(isOutOfParent(event)){
              //event is out of parent
              console.log(" #### DEPASSE#### DEPASSE#### DEPASSE#### DEPASSE"); 
              var parent = getElementAndEvent(event.parent.id).event;
              var Eduration = moment(event['end']).diff(event['start']);
              var Pduration = moment(parent['end']).diff(parent['start']);
              if(moment(event['start']).isBefore(parent['start'])){
                event['start'] = parent['start'];
                event['end'] = moment(event['start']).add(Eduration).format();
              }
              if(moment(event['end']).isAfter(parent['end'])){
                event['end'] = parent['end']; 
                event['start'] = moment(event['end']).subtract(Eduration).format();
              }
              if(Eduration>Pduration){
                event['start'] = parent['start']; 
                if(Eduration <= 3600000) {
                  event['end'] = moment(parent['end']).format();
                  // setParentDate();
                }else{
                  event['end'] = moment(parent['end']).subtract("minutes",30).format();  
                }
              }
              // parent['end'] = moment(parent['end']).add("minutes",30).format();

              render(event);  
          } 
 
        }

        function isChild(parent,event){
            if(event.event)var event = event.event;
            //check if it's going to do a loop in the tree

            var elem = getDivById(parent.id);
            var children = getChildren(elem,parent, true); 
            console.log("OLOLOLOL",children);
            for(var i in children){
                if(children[i].event.id == event.id){ 
                  return true;  
                }
            }
            return false;
        }

        function hasChild(event){
            if(event.event){
              event = event.event;
            }else{
              elem = getDivById(parent.id);
            }
            //check if it's going to do a loop in the tree

            var children = getChildren(elem,event, true);
            if(!children || children.length < 1)
              return false;
            return true
        }

        function deleteParent(event){   
          if(!event || !hasParent(event))return;
              
          parent = getElementAndEvent(event.parent.id)  ;
          parent = parent.event;
          event.parent.id = "";
          event.parent.title = "";
          event.parent.name = "";
          for( var i in parent.children){
            if(parent.children[i].id == event.id && event.id != ""){ 
              delete parent.children[i];
              return;
            }
          } 
        }

        function hasParent(event){ 
          return !(!event.parent || !event.parent.id || event.parent.id=="")
        }

        jQuery.fn.cssNumber = function(prop){
          var v = parseInt(this.css(prop),10);
          return isNaN(v) ? 0 : v;
        };

        function getProp(elem){
          return {
              y: $(elem).cssNumber("top"),
              x: $(elem).cssNumber("left"),
              w: $(elem).cssNumber("width"),
              h: $(elem).cssNumber("height"),
            }
        }



        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- end parent/child ----------------------------------------------*/
        /*-----------------------------------------------------------------------------------------------------*/

      // empty fullcalendar events and populate it with new
      function renderEvent(events){
        $calendar.fullCalendar( 'removeEvents');
        //TODO ALLDAY
        var instant_events = [];
        for (var i in events){  
          events[i]["title"] = events[i].name;
          events[i]["start"] = events[i].start_at;
          events[i]["end"] = events[i].end_at;
          delete events[i]["url"]
          // console.log(events[i].categories);
          if(events[i].categories.length > 0 && events[i].categories[0].color)
            events[i]["background-color"] = events[i].categories[0].color
           
          var diff =moment(events[i]["start"]).diff(events[i]["end"]);
          var instant = (diff  == 0 ) || (diff  == 1 );
          var allDay = !instant && ((diff % 86400000 == 0 ) || (diff % 86400000 == 1 ));
          events[i]["allDay"] = allDay;  
          if(instant)instant_events.push(events[i]);
          else
            $calendar.fullCalendar( 'renderEvent',events[i]);
        }
        setInstantEvents(instant_events);
      }

      function render(event){
        formatDate(event) 

        updateEventInDB(event); 
        // render the event on the calendar
        $calendar.fullCalendar('removeEvents', event.id); 
        $calendar.fullCalendar('renderEvent', event); 
      }
      function updateEventInDB(event){
              $.post(
                op.quickUpdateUrl,
                formatDate($.extend( {} , event )),
                function(doc) {   
                        bootstrapAlert("success","event has been well updated"); 
                },
                'json'
              );
              bootstrapAlert("info","update request sent ","Info : ","<i class='icon-spinner icon-spin'></i>");
      }
    });
    
     function formatDate(e){ 
        e['start'] = moment(e['start']).format();
        e['end'] = moment(e['end']).format();
        return e;
     }

    </script>    
	
{% endblock javascripts %}

