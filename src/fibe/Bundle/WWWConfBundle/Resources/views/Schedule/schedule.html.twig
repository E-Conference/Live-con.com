{% extends 'fibeWWWConfBundle::base.html.twig' %}


{% block title %}Schedule{% endblock title %}

{% block content %}


{% block sideBarPanel%} 
 {{ parent() }}

{% endblock %}


<div class="content">
  <div class="row">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-9">
        <div id='calendar'></div> 
    </div>
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-3">
      <div id="sidebar">  
        <div class="checkbox">
          <label>
            <input id="reposition" checked="checked" type="checkbox"> Reposition parent/child <small>(<i>need performance</i>)</small>
          </label>
        </div> 
        <div class="history hide">
          <button id="backwardBtn" class="btn btn-default" disabled="disabled" ><i class="icon-undo"></i></button>
          <button id="forewardBtn" class="btn btn-default" disabled="disabled" ><i class="icon-repeat"></i></button>
        </div>
        <div id="resourceView">
            <select class="form-control"> 
                <option value="classic">Calendar</option> 
                <optgroup label="Ressources views">
                  <option value="location" >Location</option> 
                  {# <option value="category" >Category</option>  #}
                </optgroup>
            </select>
        </div>
        <div id="filters">  

          <h4>Filter by categories</h4>
          <div class="filter">
            <select multiple class="form-control" data-filter="category_ids">
              {% for category in categories %}
                <option data-color="{{category.color}};" value="{{category.id}}">{{category.name}}</option>
              {% endfor %}
            </select>  
          </div>

          <h4>Filter by locations</h4>
          <div class="filter">
            <select multiple class="form-control" data-filter="location_ids">
              {% for location in locations %}
                <option value="{{location.id}}">{{location.name}}</option>
              {% endfor %}
            </select>  
          </div> 

          <h4>Filter by topic</h4>
          <div class="filter">
            <select multiple class="form-control" data-filter="topic_ids">
              {% for topic in topics %}
                <option value="{{topic.id}}">{{topic.name}}</option>
              {% endfor %}
            </select>  
          </div>
        </div>

        <h4>Dateless Events</h4>
        <div id='external-events'>
        </div> 
      </div>  
    </div>
  </div>


  <div id="modal"  class="modal fade">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
          <h3 class="modal-title">Edit event</h3>
        </div>
        <div class="modal-body">
          <p>One fine body&hellip;</p>
        </div> 
      </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
  </div><!-- /.modal -->
   
  <div id="modal-new-event"  class="modal fade">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
          <h3 class="modal-title">Event creation</h3>
        </div>
        <form>
          <div class="modal-body">
            <div class="input-group input-group-lg"> 
              <input name="name" id="name" type="text" class="form-control input-lg" placeholder="Give me a name!">
            </div> 
          </div>
          <div class="modal-footer">
            <a  class="btn btn-default" data-dismiss="modal">Close</a>
            <button type="submit" class="btn btn-primary">Save changes</button>
          </div>
        </form>
      </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
  </div><!-- /.modal -->
   
  <div id="modal-set-parent"  class="modal fade">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
          <h3 class="modal-title"> 
            <span class="icon-stack">
              <i class="icon-sign-blank icon-stack-base"></i>
              <i class="icon-sitemap icon-light"></i>
            </span>  
            Affect parent
          </h3>
        </div>
        <div class="modal-body"> 
          Set 
          <p class="sub-event event-name well"></p> 
          as sub event of 
          <p class="super-event event-name well"></p>
          ?
        </div> 
        
        <div class="modal-footer row-fluid">
          <div class="col-lg-6"><button class="col-md-6 btn btn-default btn-block no" data-dismiss="modal"><i class='icon-remove'></i> no</button></div>
          <div class="col-lg-6"><button class="col-md-6 btn btn-success btn-block yes" data-dismiss="modal"><i class='icon-ok'></i> ok</button></div>
        </div>

      </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
  </div><!-- /.modal -->
</div>


{% endblock %}



{% block stylesheets_page %}
  <link href="{{ asset('bundles/fibewwwconf/js/fullcalendar/fullcalendar.css') }}" rel='stylesheet' />
  <link href="{{ asset('bundles/fibewwwconf/js/fullcalendar/fullcalendar.print.css') }}" rel='stylesheet' media='print' /> 
  <link href="{{ asset('bundles/fibewwwconf/css/fullcalendarAddedUI.css') }}" rel='stylesheet'/>  
{% endblock stylesheets_page %}



{%  block javascripts_page %}
  <script src="{{ asset('bundles/fibewwwconf/js/moment.min.js') }}" type="text/javascript" ></script>
       
  <script type="text/javascript" src="{{ asset('js/jquery-ui.custom.js') }}"></script>
  <script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/fullcalendar.js') }}"></script>

  <script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/added/filter.js') }}"></script>
  <script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/added/sidebar.js') }}"></script>

  <script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/added/CalEvent.js') }}"></script>
  <script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/added/EventCollection.js') }}"></script>
    
  <script type="text/javascript">
    var Events;
    var calendar_events_indexes   = {}; 
    var calendar_events   = []; 
    var mainConfEvent;
    var dragged = null;
    var $sidebar;
    var $calendar;
    var stopRender = false;
    var fetched = false;
    var firstWeekDay = 1;
    //path
    var DATA_FEED_URL = "{{ path('schedule_view_event_get') }}";
    var op = {  
        getOrderedUrl     : "{{ path('exporter_api', { 'entity_reference': 'schedule_event','_format': 'json' }) }}?conference_id={{currentConf.id}}",
        getDatalessUrl     : "{{ path('exporter_api', { 'entity_reference': 'schedule_event','_format': 'json' }) }}?only_instant=whatever&conference_id={{currentConf.id}}",
        updateUrl     : "{{ path('schedule_view_event_edit') }}", //event modal form
        quickAddUrl   : DATA_FEED_URL + "?method=add", 
        quickUpdateUrl: DATA_FEED_URL + "?method=update",
        quickDeleteUrl: DATA_FEED_URL + "?method=remove", 
        resFeedURL    : "",
        data          : {}
    }; 

    //top right button
    var isClassicView = true;
    var viewBtns = {
      month:{
        classic:"month",
        resource:"resourceMonth",
        elem:$('<span class="fc-button fc-state-default fc-corner-left" unselectable="on">month</span>')},
      week:{
        classic:"agendaWeek",
        resource:"resourceWeek",
        elem:$('<span class="fc-button fc-state-default fc-state-active" unselectable="on">week</span>')},
      day:{
        classic:"agendaDay",
        resource:"resourceDay",
        elem:$('<span class="fc-button fc-state-default fc-corner-right" unselectable="on">day</span>')},
    };

    //                       resources view
    var currentView = "week"; 
    var resConfig = {
      location : {
        url : "{{ path('exporter_api', { 'entity_reference': 'schedule_location','_format': 'json' }) }}?conference_id={{currentConf.id}}",
        parse : function(e){
          if(e.location && e.location.id!= ""){
            return e.location.id;
          }else{
            return "other";
          }
        }
      },category : {
        url : "{{ path('exporter_api', { 'entity_reference': 'schedule_category','_format': 'json' }) }}?conference_id={{currentConf.id}}",
        parse : function(e){
          console.log(e)
          if( e.categories && e.categories.length < 1) return "other" ; 
          for(var i in e.categories){
            var c = e.categories[i];
            rtn.push(c.id);
          } 
          return rtn;
        }
      }
    };
    var currentRes = "location";

    $(document).ready(function() {    

      //init $ vars
      var $modal = $('#modal').hide();
      var $modalNewEvent = $('#modal-new-event').hide();
      var $modalSetParent = $('#modal-set-parent').hide();
      var $modalBody = $modal.find(".modal-body");
      var $modalNewEventBody = $modalNewEvent.find(".modal-body"); 
      
      $calendar = $('#calendar');
      $sidebar = $('#external-events');

      // get first day
      var firstDay = moment('5000-10-10');
      {% if currentConf.events|length > 0 %}
          if(moment('{{currentConf.events[0].startAt|date("Y-m-d")}}').isBefore(firstDay)){
              firstDay = moment('{{currentConf.events[0].startAt|date("Y-m-d")}}');
          } 
      {% endif %} 
      if(firstDay.isSame(moment('5000-10-10'))) firstDay = moment(); 





      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------- render events from json datasource -----------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/
 
      // calendar_events is the parsed array given to fullcalendar
      function renderEvents(events){
          Events = {};
   
          calendar_events   = []; 
          calendar_events_indexes   = {};  

          var i = 0;
          var orphanChildren= [];
          //non-blocking loop
          function doWork() {
 
            var event = new CalEvent(events[i]);

            if(event.mainconfevent){
              mainConfEvent = event;
              if(mainConfEvent.parent.id != ""){
                mainConfEvent.persist();
              }
              EventCollection.eventToRender = mainConfEvent; 
            } 
            if(event.parent.id == ""){
              orphanChildren.push(event);
            }
          
            i++; 

            //last iteration  
            if (!events[i]) {
              //populate sidebar
              fetched = true; 
              // $calendar.fullCalendar( 'removeEvents');
              for(var j=0;j<orphanChildren.length;j++){
                if(orphanChildren[j] == mainConfEvent)continue;
                orphanChildren[j].parent.id = mainConfEvent.id;
                orphanChildren[j].persist();
                bootstrapAlert("info","event "+orphanChildren[j].title+" was orphan, so it's now the child of "+mainConfEvent.title)
              }
              EventCollection.refetchEvents();
            }else if (stopRender!==true){ 
              //the loop goes on
              setTimeout(doWork, 1);
            }
          }; 
          if(events[i])setTimeout(doWork, 1);
      } 
 
      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- fullcalendar options ------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/ 
      calendarOption = { 
          header: {
              left: 'prev,next today',
              center: 'title',
              right: '' // computed in resource view
          },  
          resources: op.resFeedURL,
          aspectRatio: 1.6,
          editable: true,
          firstDay: firstWeekDay,         
          year: firstDay.year(), 
          month: firstDay.month(),
          date: firstDay.date(), 
          resources : resConfig[currentRes].url,
          windowResize: function(view) {
              EventCollection.eventToRender = mainConfEvent; 
          }, 
          //get events
          events : function(start, end, callback) {  
              //events have already been fetched
              if(fetched === true ){
                fetched = false;
                stopRender = false;  
                console.log("fetched",calendar_events_indexes) 
                console.log(calendar_events)
                callback(calendar_events );
                return;
              } 
              //compute dates to filter
              if(firstDay){ 
                op.data['before']=moment(firstDay).endOf('week').add("days",firstWeekDay).format();
                op.data['after']=moment(firstDay).startOf('week').add("days",firstWeekDay).format();
                firstDay = undefined;
              }else{
                op.data['before']=moment(end).format();
                op.data['after']=moment(start).format();
              }
                console.log("########fetching")
              
              $.get(
                op.getOrderedUrl,
                op.data,
                function(events) {  
                    // if(stopRender===true)return;
                    
                    if(events.length!=0)bootstrapAlert("success",events.length+" events have been well fetched" );
                    else bootstrapAlert("info","no event found");

                    renderEvents(events);
                    //$calendar.fullCalendar('renderEvent',e  ); // 3rd arg make the event "stick" 
                },
                'json'
              ).error(function(jqXHR, textStatus, errorThrown) {
                bootstrapAlert("warning","there was an error during the fetch of events",""); 
              });
              bootstrapAlert("info","event request sent","","<i class='icon-spinner icon-spin'></i>");
          },
          eventClick: function(calEvent, jsEvent, view) {  
              $.ajax({
                  url: op.updateUrl+"?id="+calEvent.id,  
                  success: function(doc) {
                      $modal.modal("show");
                      $modalBody.html(doc);
                      bootstrapAlert("stop");

                          // rerender if changed
                      $modalBody.find("#eventForm,#delete-event-form").submit(function(){
                        $modal.off('hidden.bs.modal').on('hidden.bs.modal', function () {
                          EventCollection.refetchEvents(true);
                          // $calendar.fullCalendar( 'refetchEvents' );
                        })
                      }) 
                  }
              }); 
              bootstrapAlert("info","edit <b>"+(calEvent['title'] || calEvent['name'])+"</b> request sent","Info : ","<i class='icon-spinner icon-spin'></i>");  
          },
          selectable: true,
          selectHelper: true,
          select: function(start, end, allDay) { //new event
              $modalNewEvent.modal("show")
                            .on('shown.bs.modal', function() {
                                $(this).find("#name").focus();
                            });

              $modalNewEvent.find("form").off("submit").submit(function(e){
                var title = $(this).find("#name").val();
                if (title) {
                    var tmp = {
                        title    : title,
                        parent   : {id:mainConfEvent.id},
                        children : [],
                        start    : start,
                        end      : moment(start).isSame(moment(end)) ? moment(start).add("hours",1).format() : end,
                        allDay   : allDay
                    }; 
                    console.log(tmp);

                    $.post(
                        op.quickAddUrl,
                        $.extend( {} , tmp ),
                        function(response) {  
                            bootstrapAlert("success","event <b>"+tmp['title']+"</b> has been well added");
                            tmp.id =response.id;
                            var ev = new CalEvent(tmp);  
                            ev.setParent(mainConfEvent)
                            Events[ev.id] = ev;  
                            EventCollection.eventToRender = {id:ev["id"],oldStart:ev.start,oldEnd:ev.end};  
                            ev.render();
                            ev.renderForRefetch();
                            EventCollection.refetchEvents();
                            if(response.mainConfEvent){
                                EventCollection.updateMainConfEvent(response.mainConfEvent.start,response.mainConfEvent.end); 
                            }else{
                              EventCollection.refetchEvents();
                            } 
                        },
                        'json'
                    );
                    bootstrapAlert("info","add request sent","Info : ","<i class='icon-spinner icon-spin'></i>");
                  $modalNewEvent.modal("hide");
                }else{
                    bootstrapAlert("info","You must give a name to the event");
                }
                return false;
              });
              $calendar.fullCalendar('unselect');
              
          },
          eventResize: function(event,dayDelta,minuteDelta,revertFunc){
            setTimeout(function(){ //bug... event isn't yet updated
              if(!moment(event["end"]))event["end"]=moment(event["start"]).add("h",1).format();
              var oldEnd = moment(event["end"]).subtract({'d':dayDelta,'m':minuteDelta});
              EventCollection.eventToRender = {id:event["id"],oldStart:event["start"],oldEnd:oldEnd.format()};

              console.log(dayDelta,minuteDelta,event); 
              if(!event.isOneDayLong() && !event.allDay){ 
                // event.allDay = true;
                event.fitToDay( event["start"],oldEnd.format());  
              }

              event.renderForRefetch();
              event.updateParentDate();
              event.updateChildrenDate();
              // event.render();
              EventCollection.refetchEvents();
              event.persist();
            },1);//bug... event isn't yet updated 
          },  
          viewRender : function( view, element ){
            // fetched = false;
            EventCollection.eventToRender = mainConfEvent;
          },
          eventAfterAllRender: function( view ) { 
              //avoid repeating this function 10 times...
              if(!mainConfEvent || stopRender)return;
              clearTimeout(repositionTimeout);
              repositionTimeout=setTimeout(function(){   
                  console.log("--------------------------------------------------------------");
                  console.log("-------------------      rendering       ---------------------");
                  console.log("--------------------------------------------------------------");
                  updateEventArray(); 


                  reposition(view); 
              },repositionTime);
                  
          }, 
          droppable: true, // allows things to be dropped into the calendar
          drop: function(date, allDay) { //drop from sidebar
          
              // retrieve the dropped element's stored Event Object 
              var event = dragged[1]; 
              // var event = $.extend({},dragged[1]);  
              if(event.elem)event.elem.remove();
              // delete event.elem;
              event.allDay = allDay;
              event['start'] = date;
              event.renderForRefetch();
              // event = new CalEvent(event); 
              console.log("dropped from sidebar", event);
              // assign it the date that was reported
              
              // e['end'] = moment(date).add("hours",1).format();

              event.SetRecurDate();
              // event.deleteParent();
              Events[event.id] = event;

              event.setParent(mainConfEvent);
              event.updateParentDate(); 
              EventCollection.refetchEvents();
              event.persist();


              // render the event on the calendar  
                
          },
          eventCalculateWidth : function(event, seg, leftmost, availWidth, outerWidth, levelI, bottom, top, forward, dis,view) { 

            //TODO COMPUTE WIDTH AND LEFT POS HERE TO AVOID EVENT TO BLINK 
            //TODO COMPUTE WIDTH AND LEFT POS HERE TO AVOID EVENT TO BLINK 
            //TODO COMPUTE WIDTH AND LEFT POS HERE TO AVOID EVENT TO BLINK  
            //
            // Example :
            //
            // event.top = top;
            // event.left = left;
            // event.outerWidth = outerWidth;
            // event.outerHeight = bottom - top;
            
            console.log("##############################\neventCalculateWidth !!! ")
            console.log(" event "+event.event.id+"   : ",event ) 
            console.log(" view      : ",view) 
            console.log(" seg:",seg," leftmost:",leftmost," availWidth:",availWidth," outerWidth:",outerWidth," levelI:",levelI,", bottom:",bottom,",top:",top," forward:",forward," dis:",dis);
          },
          eventDragStart: function( event, jsEvent, ui, view ) { 
              dragged = [ ui.helper[0], event ];
              setTimeout(function(){ //bug... event isn't yet updated 
                EventCollection.eventToRender = {id:event["id"],oldStart:moment(event["start"])._d,oldEnd:moment(event["end"])._d}; 
                dragChildren(event, jsEvent, ui, view);
              },1);//bug... event isn't yet updated
          },
          eventDragStop: function( event, jsEvent, ui, view ) {  
            var event = Events[event.id]
              dragged = [ ui.helper[0], event ]; 
              var oldStart = moment(event.start);
              var oldEnd = moment(event.end); 
              if(isClassicView !== true ){
                console.log("ressources changed ! "+ event.resource)
              }
              setTimeout(function(){ //bug... event isn't yet updated 
                if(!event.isOneDayLong()){
                  if(event.fitToDay(oldStart,oldEnd) === false){ 
                    event.renderForRefetch();
                    EventCollection.refetchEvents();
                    return;
                  }
                }
                endDrag(event,ui.helper[0] ); 
                event.persist(); 
              },1);//bug... event isn't yet updated 
          },
          //resources managment 
          // refetchResources : true,
      };
      $calendar.fullCalendar(calendarOption);  
      $calendar.fullCalendar('changeView', viewBtns[currentView].classic );
      $('.fc-header-left').append('<span class="fc-header-space"></span><button class="fc-button fc-state-default fc-corner-left fc-corner-right"><span class="fa fa-refresh"></span></button>').click(function(e){ 
        EventCollection.resetEvents();
      })
      // $('.fc-header-left .fc-button').click(function(){ 
      //   EventCollection.eventToRender = mainConfEvent;
      //   EventCollection.refetchEvents();
      // })

      /*-------------------------------------------------------------------------------------------------*/
      /*------------------------------------- update function -------------------------------------------*/
      /*-------------------------------------------------------------------------------------------------*/

      /**
       * function triggered after all events have been rendered 
       */
      function updateEventArray(){ 

          var startScript = moment();
          // calendar_events = [];
          var calendarEvents = $calendar.fullCalendar('clientEvents'); //loop only on calendar events

          for (var i in calendarEvents){
            var calendarEvent = calendarEvents[i];
            if(Events[calendarEvent.id]){
              Events[calendarEvent.id] = calendarEvent;
              // calendar_events.push(calendarEvent);
              // calendar_events_indexes[calendarEvent.id]=calendar_events.length-1;

              // console.log(calendarEvent.id+"_###found in calendar",Events[calendarEvent.id]);
            } 
          } 
          var foundElem = []; 
          $(".fc-view-"+(isClassicView ? viewBtns[currentView].classic : viewBtns[currentView].resource)+" .fc-event:visible").each(function(i){ 
            var id = parseInt($(this).find(".fc-event-id").text()); 

            foundElem.push(id)
            if(Events[id])Events[id]['elem'] = $(this);
          });
          console.debug(moment().diff(startScript)+" to updateEventArray");
          console.log("event array updated",Events);
          // console.log(Events) 
 
      }


      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- position ------------------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/ 

      /**
       *  add UI (popover, border color etc...)
       *  just after to the fullcalendar "all event render" function
       */
 
      var repositionTime = 100;
      var repositionTimeout;
      function reposition(view){

          var eventMargin  = 4,
              popoverWidth = 276,
              colWidth     = view.getColWidth(),
              startScript ; 
              toppestParent = EventCollection.getToppestParent(view); 

          console.log("toppest parent : ",toppestParent);
          if(!toppestParent)return;
          // console.log("toppestParent",toppestParent);
          
          var startScript = moment()
          stylizeBlock([mainConfEvent]); 
          console.debug(moment().diff(startScript)+" to stylizeBlock")

          if($('#reposition').is(':checked') && (view.name == "agendaWeek" || view.name == "agendaDay")){ 
              //non-blocking 
              setTimeout(function(){ 
                  var startScript = moment();

                  positionBlock(toppestParent,colWidth,2);
                  console.debug(moment().diff(startScript)+" to positionBlock");
                  console.log("--------------------------------------------------------");
                  console.log("----------------      rendered       -------------------");
                  console.log("--------------------------------------------------------");
              },1)
          }else{
            EventCollection.eventToRender = undefined;
          }
          function positionBlock(events,colWidth,parentZindex,parentPos,parent){ 
                  
                  // console.log(" ######positionBlocks######");
                  
                  colWidth -=eventMargin/2; 
                  var broCountRange;
                  try
                  {
                      broCountRange = EventCollection.getBroCountRange(events)
                  }
                  catch(err)
                  {
                      // events aren't in the dom...
                      
                      return;
                  }

                  // console.log("##getBroCountRange of "+(events.length==1?events[0].id : "array["+events.length+"]")+"## ",broCountRange);  


                  for (var i in events){

                    var event = events[i]; 
                    // console.log("positionning : ",event.id);
                    var element = event.elem; 
                    if(!element)  continue; //event is in another view
                        
                    var elemProp = getProp(element); 
                    var newColWidth;

                    // repositionning (width and Xpos) 
                    //positionning event to be over the parent
                    // console.log(event.id)
                    // if(broCountRange[event.id]){

                        var count   = broCountRange[event.id].count,
                            range   = broCountRange[event.id].range,
                            left    = broCountRange[event.id].minLeft - 3;
                        // console.log("event "+event.id+" has "+count+" bros. range = "+range+" minLeft = "+left);

                        //width
                        newColWidth = (colWidth/count)-eventMargin/2
                        //-(count/2);

                         
                        //place child into his parent
                        if(parentPos){
                          left = parentPos.x;
                          // newColWidth = newColWidth;
                          if(moment(parent.start).isSame(moment(event.start))){
                            element.css("top",elemProp.y+eventMargin/2); 
                            element.css("height",elemProp.h-eventMargin);
                          }
                          if(moment(parent.end).isSame(moment(event.end))){ 
                            element.css("height",elemProp.h-eventMargin);
                          } 
                        } 
                        element.width(newColWidth);
                        
                        left += eventMargin/2 + ((range)*(newColWidth + eventMargin/2)); 
                        if(left)element.css("left",left); 
                        // console.log(left)  
                    // }else{
                    //   console.warn("couldn't have get broCountRange["+event.id+"]");
                    // }

                    //z-index 
                    element.css('z-index',parentZindex+1)  
                    // end repositionning (width and Xpos)
                    
                    var children = EventCollection.getChildren(event,{concat:false,onlyEvent:true});
                    // console.log("elem",children)
                    if(children.length>0){
                      elemProp = getProp(element);
                      positionBlock(children,newColWidth,parentZindex+1,elemProp,event);
                    }
                  }
       
          }
          var dragOverEvents = []; 
          var currentDragOverEvent = null;
          function stylizeBlock(events){ 
                // console.log("stylizeBlocks : ",events);
                    /*****************  styling (opacity, hover, drag, drop) ********************/
                for (var i in events){
                    var event = events[i]; 
                    // console.log("positionning : ",event.id);
                    var element = event.elem; 
                    if(!element)  continue; //event is in another view

                    //action on hovered by another dragging event  
                    element.data("border-color",element.css("border-color"))
                           // .data("background-color",element.css("background-color"))
                           .data("prop",getProp(element)); 


                    // var shortestDragOverEvent = null;

                    // var lastShortestDragOverEvent = null;
                    
                    element.droppable({ 
                      tolerance: "pointer" ,
                        over: function( ev, ui ) {
                          if ( $(ui.draggable).hasClass("fc-event") ){ 
                            var event = EventCollection.getEventByDiv($(this));
                            var draggedEvent = dragged[1];
 
                            //check if it's going to do a loop in the tree
                            if(event.isChild(draggedEvent)){
                              return;
                            }

                            if(currentDragOverEvent)currentDragOverEvent.elem.removeClass("drag-over-events");

                            currentDragOverEvent = {id:event.id,elem:$(this)};  
                            dragOverEvents.push(currentDragOverEvent);
                            if(draggedEvent.parent.id !== event.id) currentDragOverEvent.elem.addClass("drag-over-events")  
                            
                          }
                        },
                        out: function( ev, ui ) { 
                          if ( $(ui.draggable).hasClass("fc-event") ){
                            // $(this).animate({"background-color":$(this).data("background-color")},{queue:false});
                            $(this).removeClass("drag-over-events")
                            var event = EventCollection.getEventByDiv($(this));

                            for(var i in dragOverEvents){
                              if(dragOverEvents[i].id == event.id){
                                dragOverEvents.splice(i,1); 
                              }
                            }
                            if(dragOverEvents.length>0){
                              currentDragOverEvent = dragOverEvents[dragOverEvents.length-1]; 

                              // if(dragged[1].parent.id !== event.id)
                                currentDragOverEvent.elem.addClass("drag-over-events");
                            }
                          }
                        },
                        drop: function( ev, ui ) { 
                          if ( $(ui.draggable).hasClass("fc-event") &&  currentDragOverEvent){  
                            
                            var event = Events[currentDragOverEvent.id];
                            if(currentDragOverEvent.id === event.id){
                              currentDragOverEvent.elem.removeClass("drag-over-events");
                              dragOverEvents = []; 
                              currentDragOverEvent = null;
                            } else {
                              return;
                            }

                            var draggedEvent = dragged[1];
                            console.log("dropped1 on "+event.id)
                            // check if it's not already a child
                            if(draggedEvent.parent.id === event.id){
                              return;
                            } 
                            console.log("dropped2 on "+event.id)
                            //check if it's going to do a loop in the tree
                            if(event.isChild(draggedEvent)){ 
                              return;
                            } 
                            console.log("dropped3 on "+event.id)
                            console.log(event)
                            console.log(draggedEvent)

                            // if(event.isOutOf(draggedEvent))return; 
                            console.log("dropped4 on "+event.id)
                            $modalSetParent.modal('show').find(".sub-event").text(draggedEvent.title);
                            $modalSetParent.find(".super-event").text(event.title);

                            $modalSetParent.find('button.yes').off("click").click(function(){

                              //set event as parent of draggedEvent and children relation
                              draggedEvent.setParent(event);
                              draggedEvent.updateParentDate(); 
                              draggedEvent.renderForRefetch();
                              EventCollection.refetchEvents();
                              draggedEvent.persist(); 
                            });   
                          }
                        }
                    }); //end droppable
    
                    element
                              /*************** popover *****************/
                        .popover({
                                trigger : 'hover',
                                html : true,
                                placement : function( context,source){
                                  var popoverProp = getProp($(context));
                                  var eventProp = getProp(source);
                                  var calendarProp = getProp($calendar);
                                  // console.log(popoverProp,eventProp,calendarProp)
                                  if(eventProp.x + eventProp.w + popoverWidth < calendarProp.x + calendarProp.w )
                                    return "right";
                                  if(eventProp.x - popoverWidth > calendarProp.x)
                                    return "left";
                                  return "bottom";
                                },
                                title : ' <b><span class="muted">#'+event.id+'</span> '+event.title+'</b>',
                                content : event.getPopoverContent(),
                        })
                              /*************** hover : change border color  *****************/
                        .hover(function(){
                              //enter
                              $(this).animate({"border-color":"#3F3F3F"},{queue:false});

                              var elemEvent = EventCollection.getEventByDiv($(this));
                              var childrenDiv = EventCollection.getChildren(elemEvent,{concat:true,onlyEvent:true});
                              for (var j in childrenDiv){
                                var curChildDiv = EventCollection.getDivById(childrenDiv[j].id);
                                if(!curChildDiv)continue;
                                curChildDiv.animate({opacity:0.3},{duration:'fast',queue:false});
                              }
                        },function(){
                              $(this).animate({"border-color":$(this).data("border-color")},{queue:false})
                              var elemEvent = EventCollection.getEventByDiv($(this));
                              var childrenDiv = EventCollection.getChildren(elemEvent,{concat:true,onlyEvent:true});
                              for (var j in childrenDiv){
                                var curChildDiv = EventCollection.getDivById(childrenDiv[j].id );
                                if(!curChildDiv)continue;
                                curChildDiv.animate({opacity:1},{duration:'fast',queue:false})
                              }
                    });  

                    // end styling (opacity, hover, drag, drop)
                    
 
                    var children = EventCollection.getChildren(event,{concat:false,onlyEvent:true,noSidebar:true});
                    // console.log("elem",children)
                    
                    
                    if(children.length>0){
                      elemProp = getProp(element);
                      stylizeBlock(children);

                    }

                  }
               
            
          }; 

      } 
      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- position ------------------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/




      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- drag children  ------------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/
 

      var draggedProp,draggedStart,children;

      function dragChildren(event){
        // console.log(event['start'])
        // console.log(draggedProp)
        // console.log("parentElement",parentElement.text(),parentElement)
        children = EventCollection.getChildren(event,{concat:true}); 
        draggedStart = moment(event['start']); 

        // $.each(children,function(i,child){ 
        //   $(child.elem).fadeTo(200, 0.5);
        // });
        // console.log("lol ",children);

        //update helper
        var draggedProp = getProp(event.elem)
        $(event.elem).off("mousemove").mousemove( function(ev){ 
          var newdraggedProp = getProp(event.elem);
          var diff = { 
            x : (draggedProp.x - newdraggedProp.x) , 
            y : (draggedProp.y - newdraggedProp.y)
          };
          if(diff.x !== 0  || diff.y !== 0 ){
            draggedProp =  newdraggedProp;  

            $.each(children,function(i,child){
               // console.log(child)
              var childProp = getProp(child.elem);
              // console.log("lol ",childProp);
              $(child.elem).css("left",childProp.x-diff.x+"px")
                              .css("top",childProp.y-diff.y+"px");
            });
          }
        }); 
      } 


      function endDrag(event){ //end drag from calendar to calendar
    
        console.log("endDrag"); 
        stopRender = true;
        //get diff
        var diff = moment(draggedStart).diff(moment(event['start']));
        if(diff===0)return;
        //apply to children  
        // var startScript = moment();
        $.each(children,function(i,child){ 
          // var startScript = moment();
          child['start']  = moment(child['start']).subtract(diff);
          child['end']  = moment(child['end']).subtract(diff);
 
          child.renderForRefetch();
          child.formatDate() 
          child.persist() 
          // console.debug(moment().diff(startScript)+" to affect one child"); 
        }); 
        // console.debug(moment().diff(startScript)+" to affect children");

        //apply to parent
        var parent = EventCollection.find(event.parent.id,{noSidebar:true});
        // return if not in calendar view   
        if(event.isOutOf(parent,true)){
          //event dropped out of parent
          console.log(" #### moved out ####");  
          event.setParent(mainConfEvent);
          // event.updateParentDate(); 
        }else{
          //still inside but may need a parent update (to properly contains child)
          event.updateParentDate(); 
          event.renderForRefetch();  
        } 
        EventCollection.refetchEvents();
          // stopRender = true;
          //non-blocking loop
      } 



      /*-------------------------------------------------------------------------------------------------*/
      /*------------------------------------- initialize sidebar ----------------------------------------*/
      /*-------------------------------------------------------------------------------------------------*/
      
      var sidebar = new Sidebar('#external-events');
      sidebar.populate(op.getDatalessUrl);

      //dropped from calendar to sidebar;
      $(sidebar).on("dropped",function(ev,calEvent){  
          console.log("dropped",calEvent)
          var event = Events[calEvent.id];
          EventCollection.fitMainConfEvent();
          

          //set as instant event 
          event['end'] = moment(event['start']);
          event.formatDate();
          // remove event from calendar 
          event.removeForRefetch();
          // $calendar.fullCalendar('removeEvents',event.id); 
          event.persist();

          //affect children
          var children = EventCollection.getChildren(event, {concat:true,onlyEvent:true} ); 
          $.each(children,function(i,child){
              //set as instant event 
              child['end'] = moment(child['start']);
              child.formatDate();
              // remove event from calendar 
              child.removeForRefetch(); 
              $calendar.fullCalendar('removeEvents',child.id);  
              sidebar.setSidebarEvent(child,true); 
              child.persist();
          });
          //set as sidebar draggable 
          sidebar.setSidebarEvent(event,true);
          EventCollection.refetchEvents();
          // updateEventArray();
      }).on("drag",function(ev,event){ 
          dragChildren(event);
      }); 


      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- initialize filters --------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/


      //init filters
      var filter = new initFilter();
      $(filter).on("change", function(ev,key,val) {

          EventCollection.eventToRender = mainConfEvent;
          console.log("filtering : ",val,key,op.data); 
          op.data[key] = val;  
          stopRender = true;
          EventCollection.refetchEvents(true);
          // $calendar.fullCalendar('refetchEvents');   
      });


      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- resources view ------------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/ 
      
      initViewsBtns(viewBtns);
      $('#resourceView select').change(function(e){ 
        isClassicView = $(this).val() == "classic";
        if(isClassicView){ //render the classic view   
          // $('.fc-event').remove();
          $calendar.fullCalendar('changeView', viewBtns[currentView].classic );
          EventCollection.refetchEvents(); 
          // $calendar.fullCalendar( 'renderEvent', Events);
          // $calendar.trigger("stopRender");
          // fetch = false;
          // $calendar.fullCalendar('refetchEvents');   
        }else{ //render a resource view

          var resource = $(this).val();
            currentRes = resource;
          op.resFeedURL = resConfig[resource].url; 
          // $('.fc-event').remove();
          //  
          $calendar.fullCalendar('changeView', viewBtns[currentView].resource );
          EventCollection.refetchEvents(); 
          // $calendar.fullCalendar('refetchEvents');
          // $calendar.fullCalendar('refetchResources');


          
          //seems to be useless...
          //can fetch resources but can't go back to classic view when we destroy calendar
          // $calendar.fullCalendar( 'destroy' ); 
          // $calendar.fullCalendar(calendarOption);


        }
        initViewsBtns(viewBtns); 
      })
      function initViewsBtns(viewBtns){
        for( var i in viewBtns){
          viewBtns[i].elem.appendTo(".fc-header-right").off("click").click({i:i},function(e){ 
                  currentView = e.data.i;
                  $(this).siblings().removeClass("fc-state-active");
                  $(this).addClass("fc-state-active");
                  // EventCollection.eventToRender = mainConfEvent;
                  // EventCollection.refetchEvents();
                  $calendar.fullCalendar('changeView', (isClassicView ? viewBtns[currentView].classic : viewBtns[currentView].resource)); 
          })
        }
      }

      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- History -------------------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/ 


      //render an Events array
      //TODO look at eventResize and eventDrop  revertFn 
      function renderHistory(events){
          console.log("renderHistory",events);
          Events = events;
          var instant_events   = []; 
          $calendar.fullCalendar( 'removeEvents');
          storeinHistory = false;
          for (var i in Events){
            var event = Events[i]; 
            if(events[i].isInstant()){
              instant_events.push(event);
            }else{ 
                $calendar.fullCalendar( 'renderEvent',event);
            } 
          }
          setInstantEvents(instant_events); 
      }

      //init history
      History.setForewardBtn($('#forewardBtn'))
             .setBackwardBtn($('#backwardBtn')); 
      $(History).on('updateState',function(ev,events){ 
        renderHistory(events);
      })
    });//end $(document).ready


    var History = {
        _statesHistory : [],
        _currentState : -1,
        _backwarded : false,

        _backwardBtn : '',
        _forewardBtn : '',
        
        _forewardBtn : '',
        _renderingState : true,
        isRenderingStateFromHistory : function(){
          if(this._renderingState===true){
            this._renderingState = false;
            return true;
          }
          return false;
        },
        setBackwardBtn : function(btn){
          this._backwardBtn = $(btn);
          this._backwardBtn.click(function(){History._backward()}); 
          return this;
        },
        setForewardBtn : function(btn){
          this._forewardBtn = $(btn);
          this._forewardBtn.click(function(){History._foreward()});   
          return this;
        },
        storeState : function(model){
          console.log("history state stored");
          var state = jQuery.extend(true, {}, model); 
          var arraySplice = this._backwarded ? 2000 : 0; 
          this._backwarded = false;
          this._currentState++;
          this._statesHistory.splice(this._currentState,arraySplice,state);
          this._checkBtn();
          return this;
        },
        //pseudo private methods

        //disable btn
        _checkBtn : function(){
            if(this._currentState<=0)this._backwardBtn.attr("disabled","disabled");
            else this._backwardBtn.removeAttr("disabled");

            if(!this._statesHistory[this._currentState+1])this._forewardBtn.attr("disabled","disabled");
            else this._forewardBtn.removeAttr("disabled"); 
        },
        _backward : function(btn){
            if(this._currentState<=0)return;
            this._currentState--;
            this._backwarded=true;
            // fb(this._statesHistory);
            this._render();
        },
        _foreward : function(btn){
            if(!this._statesHistory[this._currentState+1])return;
            this._currentState++;
            this._render();
        },
        _render : function(){
            this._checkBtn();
            this._renderingState = true;
            $(this).trigger('updateState', jQuery.extend(true, {}, this._statesHistory[this._currentState]));  
        },
    };

    //css utils fn

    jQuery.fn.cssNumber = function(prop){
        var v = parseInt(this.css(prop),10);
        return isNaN(v) ? 0 : v;
    };

    //get css positionning properties from an event $div (see EventCollection.getDivById) 
    function getProp(elem){
        return {
          y: $(elem).cssNumber("top"),
          x: $(elem).cssNumber("left"),
          w: $(elem).cssNumber("width"),
          h: $(elem).cssNumber("height")
        };
    }

  </script>    
	
{% endblock javascripts_page %}

