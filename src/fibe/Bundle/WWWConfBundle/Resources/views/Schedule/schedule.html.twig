{% extends 'fibeWWWConfBundle::base.html.twig' %}


{% block title %}Schedule{% endblock title %}




{% block body %} 
  {{ parent() }}
      

<div id='calendar'></div> 
<div id="sidebar">  
  <h4>Filter by category</h4>
  <div id='filter-category'>
  </div>
  <h4>Filter by location</h4>
  <div id='filter-location'>
  </div>
  <h4>Dateless Events</h4>
  <div id='external-events'>
  </div>
</div>  


<div id="modal"  class="modal fade">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3 class="modal-title">Edit event</h3>
      </div>
      <div class="modal-body">
        <p>One fine body&hellip;</p>
      </div> 
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
 
<div id="modal-new-event"  class="modal fade">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3 class="modal-title">Give a name to the new event</h3>
      </div>
      <form>
        <div class="modal-body">
          <div class="input-group input-group-lg"> 
            <input name="name" id="name" type="text" class="form-control input-lg" value="New event" placeholder="New event">
          </div> 
        </div>
        <div class="modal-footer">
          <a  class="btn btn-default" data-dismiss="modal">Close</a>
          <button type="submit" class="btn btn-primary">Save changes</button>
        </div>
      </form>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
 
<div id="modal-set-parent"  class="modal fade">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3 class="modal-title"> 
          <span class="icon-stack">
            <i class="icon-sign-blank icon-stack-base"></i>
            <i class="icon-sitemap icon-light"></i>
          </span>  
          Affect parent
        </h3>
      </div>
      <div class="modal-body"> 
        Set 
        <p class="sub-event event-name well"></p> 
        as sub event of 
        <p class="super-event event-name well"></p>
        ?
      </div> 
      
      <div class="modal-footer row-fluid">
        <div class="col-lg-6"><button class="col-md-6 btn btn-default btn-block no" data-dismiss="modal"><i class='icon-remove'></i> no</button></div>
        <div class="col-lg-6"><button class="col-md-6 btn btn-success btn-block yes" data-dismiss="modal"><i class='icon-ok'></i> ok</button></div>
      </div>

    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
 


{% endblock %}



 {% block stylesheets %}
  {{ parent() }}
 
    <!--
    <link rel='stylesheet' type='text/css' href='http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.2/themes/start/jquery-ui.css' />
    --> 

<link href="{{ asset('bundles/fibewwwconf/js/fullcalendar/fullcalendar.css') }}" rel='stylesheet' />
<link href="{{ asset('bundles/fibewwwconf/js/fullcalendar/fullcalendar.print.css') }}" rel='stylesheet' media='print' />
    <style type="text/css">




    .navbar { 
      margin-bottom: 0; 
    }
    #calendar {  
        width  : 80%; 
        margin : 0;
        padding: 1em;
        float  : left
    }
        
    #sidebar {   
        padding   : 1em 0.5em;
        /*height  : 100%; */
        width     : 20%;
        padding   : 0 10px; 
        background: #eee;
        z-index   : 1;
        float     : right;
    }
        
    #sidebar h4 {
        font-size  : 16px;
        margin-top : 0;
        padding-top: 1em;
    }
        
    #sidebar p {
        margin   : 1.5em 0;
        font-size: 11px;
        color    : #666;
    }
        
    #sidebar p input {
        margin        : 0;
        vertical-align: middle;
    } 

    #external-events{
        border        : 1px solid #ccc;
        padding       : 1em 0.5em;
        margin        : 0;
        margin-bottom : 1em;
        position      : relative; 
        z-index       : 2; 
        /*overflow-y    :    auto;*/
        height        : 100%;  /*sidebar h4 height*/
        min-height    : 15em;

    }
        
    .external-event { /* try to mimick the look of a real event */
        margin-bottom: 1em;
        padding      : 2px 4px;
        background   : #3366CC;
        color        : #fff;
        font-size    : .85em;
        cursor       : pointer;
    }
    #modal .modal-dialog { 
        width: 90%; 
    }  
    #modal-set-parent .modal-body { 
      /*text-align: center; */
    }
    #calendar table { table-layout: fixed; }

    .event-name { 
      text-align: center;
      margin:2em;
      font-weight: bolder; 
    }
    .fc-event-id {
      /*display: none;*/
    }
  .fc-view { /* prevents dragging outside of widget */
      overflow: visible;
  }


    </style>

{% endblock stylesheets %}



{%  block javascripts %}   
  {{ parent() }} 
<script src="{{ asset('bundles/fibewwwconf/js/moment.min.js') }}" type="text/javascript" ></script>
     
<!-- <script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/jquery-ui-1.10.3.custom.min.js') }}"></script> -->
<script type="text/javascript" src="{{ asset('js/jquery-ui-1.10.3.custom.js') }}"></script>
<script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/fullcalendar.js') }}"></script>

    
    <script type="text/javascript">
        $(document).ready(function() {    
 
            //event edit popup
            var $modal = $('#modal').hide();
            var $modalNewEvent = $('#modal-new-event').hide();
            var $modalSetParent = $('#modal-set-parent').hide();
            var $modalBody = $modal.find(".modal-body");
            var $modalNewEventBody = $modalNewEvent.find(".modal-body");
            var $calendar = $('#calendar');
            var $sidebar = $('#external-events');

           // calcule du premier jour
            var firstDay = moment('5000-10-10');
            {% for event in currentConf.confEvents %}
                {% if date(event.startAt) > date("1980-01-02") %}
                    
                    if(moment('{{event.startAt|date("Y-m-d")}}').isBefore(firstDay)){
                        firstDay = moment('{{event.startAt|date("Y-m-d")}}');
                    }

                {% endif %}
            {% endfor %}
            if(firstDay.isSame(moment('5000-10-10'))) firstDay = moment();

            
            //path
            var DATA_FEED_URL = "{{ path('schedule_view_event_get') }}";

            var op = {  
                getOrderedUrl     : "{{ path('exporter_api', { 'entity_reference': 'schedule_event','_format': 'json' }) }}",
                updateUrl     : "{{ path('schedule_view_event_edit') }}", //event modal form
                quickAddUrl   : DATA_FEED_URL + "?method=add", 
                quickUpdateUrl: DATA_FEED_URL + "?method=update",
                quickDeleteUrl: DATA_FEED_URL + "?method=remove"

            };

        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- initialize filters --------------------------------------------*/
        /*-----------------------------------------------------------------------------------------------------*/
 
 
      var categories = [];
      {% for category in categories %} 
        categories.push({
          id   : "{{category.id}}",
          name : "{{category.name}}",
          color: "{{category.color}}"
        });
      {% endfor %}
      var locations= [];
      {% for location in locations %} 
        locations.push({
          id   : "{{location.id}}",
          name : "{{location.name}}",
          color: "{{location.description}}"
        });
      {% endfor %}

      // console.log(categories,locations);
 
      var $categoryCtn = $('#filter-category').html("");
      var $categorySelect = $('<select name="filter_category_select" id="filter_category_select" class="form-control" ><option value="*">See all</option></select>')
                                  .appendTo($categoryCtn)
                                  .change(function(){
                                    var data = $(this).val()==='*' ? {} : { category_id: $(this).val() };
                                    $.get(
                                      op.getOrderedUrl,
                                      data,
                                      function(events) {  
                                          bootstrapAlert("success","events have been well fetched" );
                                          renderEvent(events);
                                          //$calendar.fullCalendar('renderEvent',e  ); // 3rd arg make the event "stick" 
                                      },
                                      'json'
                                    );
                                    bootstrapAlert("info","Request sent for categorie "+ $(this).find("option[value='"+$(this).val()+"']").text(),"Info : ","<i class='icon-spinner icon-spin'></i>"); 
                                  }); 
      for(var i =0; i < categories.length;i++){
        $categorySelect.append('<option value="'+categories[i].id+'">'+categories[i].name+'</option>');
      }

      var $locationCtn = $('#filter-location').html(""); 
      var $locationSelect = $('<select name="filter_location_select" id="filter_location_select" class="form-control" ><option value="*">See all</option></select>')
                                  .appendTo($locationCtn)
                                  .change(function(){
                                    var data = $(this).val()==='*' ? {} : { location_id: $(this).val() };
                                    $.get(
                                      op.getOrderedUrl,
                                      data,
                                      function(events) {  
                                          bootstrapAlert("success","events have been well fetched" );
                                          renderEvent(events);
                                          //$calendar.fullCalendar('renderEvent',e  ); // 3rd arg make the event "stick" 
                                      },
                                      'json'
                                    );
                                    bootstrapAlert("info","Request sent for location "+ $(this).find("option[value='"+$(this).val()+"']").text(),"Info : ","<i class='icon-spinner icon-spin'></i>");  
                                  });
      for(var i =0; i < locations.length;i++){
        $locationSelect.append('<option value="'+locations[i].id+'">'+locations[i].name+'</option>');
      }

        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- end initialize filters ----------------------------------------*/ 
        /*-----------------------------------------------------------------------------------------------------*/
 
        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- initialize the calendar ---------------------------------------*/
        /*-----------------------------------------------------------------------------------------------------*/
        var dragged = null;
        $calendar.fullCalendar({ 
            header: {
                left: 'prev,next today',
                center: 'title',
                right: 'month,agendaWeek,agendaDay'
            }, 
            editable: true,
            year: firstDay.year(), 
            month: firstDay.month(),
            date: firstDay.date(),
            //get events
            events: function(start, end, callback) { 
              $.get(
                op.getOrderedUrl,
                {},
                function(events) {  
                    bootstrapAlert("success","events have been well fetched" );
                    renderEvent(events);
                    //$calendar.fullCalendar('renderEvent',e  ); // 3rd arg make the event "stick" 
                },
                'json'
              ); 
              bootstrapAlert("info","event request sent","","<i class='icon-spinner icon-spin'></i>");
            },  
            eventClick: function(calEvent, jsEvent, view) { 
  
                    $.ajax({
                        url: op.updateUrl+"?id="+calEvent.id,  
                        success: function(doc) {  
                            $modal.modal("show");
                            $modalBody.html(doc);
                            bootstrapAlert("stop");
                        }
                    });
                    bootstrapAlert("info","edit <b>"+event['title']+"</b> request sent","Info : ","<i class='icon-spinner icon-spin'></i>"); 

            },
            selectable: true, 
            selectHelper: true,
            select: function(start, end, allDay) { //new event
                $modalNewEvent.modal("show");

                $modalNewEvent.find("form").off("submit").submit(function(e){ 
                  var title = $(this).find("#name").val(); 
                  if (title && parent) { 
                      var e = {
                          title: title,
                          parent: {id:""},
                          children: [],
                          start: start,
                          end: moment(start).isSame(moment(end)) ? moment(start).add("hours",1).format() : end,
                          allDay: allDay
                      };
                      $.post(
                              op.quickAddUrl,
                              formatDate($.extend( {} , e )),
                              function(response) {  
                                  bootstrapAlert("success","event <b>"+event['title']+"</b> has been well added");
                                  e.id=response.id;
                                  render(e);
                                  // $calendar.fullCalendar('renderEvent',e); // 3rd arg make the event "stick" 
                              },
                              'json'
                      );
                      bootstrapAlert("info","add request sent","Info : ","<i class='icon-spinner icon-spin'></i>");
                  }
                  $modalNewEvent.modal("hide");
                  return false;
                });
                $calendar.fullCalendar('unselect');
            },
            eventResize: function(event,dayDelta,minuteDelta,revertFunc) {
                    updateParentDate(event);
                    updateChildrenDate(event);
                    render(event);
            },
            eventDataTransform: function(data){return data;},
            droppable: true, // this allows things to be dropped onto the calendar !!!
            eventDrop : function(event){ //drop from calendar ")
                    updateEventInDB(event);
            }, 
            eventAfterAllRender: function( view ) { 
              reposition(view);
            }, 
            drop: function(date, allDay) { //drop from sidebar
            
                // retrieve the dropped element's stored Event Object
                var originalEventObject = $(this).data('eventObject');
                
                // we need to copy it, so that multiple events don't have a reference to the same object
                var copiedEventObject = $.extend({}, originalEventObject);
                
                // assign it the date that was reported 
                copiedEventObject.allDay = allDay;
                copiedEventObject['start'] = date;
                formatDate(copiedEventObject);

                SetRecurDate(copiedEventObject);
                deleteParent(copiedEventObject);
                
                updateEventInDB(copiedEventObject );
                // render the event on the calendar
                // the third `true` argument determines if the event "sticks" (http://arshaw.com/fullcalendar/docs/event_rendering/renderEvent/)
                render(copiedEventObject);
                
                $(this).remove();  
            },
            eventDragStart: function( event, jsEvent, ui, view ) { 
              dragged = [ ui.helper[0], event ];
              setTimeout(function(){ //bug... event isn't yet updated 
                dragChildren(event, jsEvent, ui, view);
              },1);//bug... event isn't yet updated 
              
            },
            eventDragStop: function( event, jsEvent, ui, view ) {  
                dragged = [ ui.helper[0], event ]; 
                //save children to db
              setTimeout(function(){ //bug... event isn't yet updated 
                endDrag(event,ui.helper[0] );
              },1);//bug... event isn't yet updated 
            },
            eventRender : function( event, element, view ) {
              setTooltip(element,event);

            }
        }); 
        $calendar.fullCalendar('changeView', "agendaWeek" );
        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- end initialize the calendar -----------------------------------*/
        /*-----------------------------------------------------------------------------------------------------*/
 

        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- initialize the sidebar ----------------------------------------*/
        /*-----------------------------------------------------------------------------------------------------*/
        function setInstantEvents(instant_events){
          $sidebar.html("");  
          var eventHtml =  "<div class='external-event fc-event-draggable'></div>";
          var $sidebarTmp = $(eventHtml).prependTo($sidebar).hide();
          
          //set sidebar bubble draggable
          for (var i in instant_events){ 
            var $event = $(eventHtml);
            $event = sidebarDraggable($event,instant_events[i]);
          }

          //set sidebar droppable
          $sidebar.droppable({
            over: function( event, ui ) {  
                if( event && $(ui.draggable).hasClass("fc-event")) {
                    var event = dragged[1];
                    $(this).css("border-color","green"); 
                    sidebarEventHtml($sidebarTmp,event);
                    $sidebarTmp.show() ;
                }
            },
            out: function( event, ui ) { 
                if($(ui.draggable).hasClass("fc-event")) {
                    $(this).css("border","solid 1px #ccc"); 
                    $sidebarTmp.hide();
                } 
            },
            drop: function( event, ui ) { 
              if ( $(ui.draggable).hasClass("fc-event")){
                //update ui
                $sidebarTmp.hide();
                $(this).css("border","solid 1px #ccc"); 

                console.log("end Drag to sidebar") ;

                var event = dragged[1]; 
                //delete parent relation

                deleteParent(event);

                setSidebarEvent(event);

                //affect children 
                var children = getChildren(event, {concat:true,onlyEvent:true} ); 
                $.each(children,function(i,child){
                  setSidebarEvent(child); 
                });
              }
            }
          });

          function sidebarDraggable($event,event){
            $event.appendTo($sidebar);
            sidebarEventHtml ($event,event);
            $event.prepend("<span class='fc-event-id ' style='color:grey;'>"+event.id+"</span>");
            //set child drag
            //
            $event.draggable({
                      zIndex: 999,
                      revert: true,      // will cause the event to go back to its
                      revertDuration: 0,  //  original position after the drag
                      start : function (ev,ui){
                            dragged = [ ui.helper[0], event ]; 
                            setTimeout(function(){ //bug... event isn't yet updated  
                              dragChildren(event);
                            },1);//bug... event isn't yet updated   
                      }
                    })
                    .data('eventObject', event);

            // store the Event Object in the DOM element so we can get to it later
            return $event;
          }

          
          function setSidebarEvent(event){
            //set as instant event 
            event['end'] = moment(event['start']);
            formatDate(event);
            // remove event from calendar 
            $calendar.fullCalendar('removeEvents',event.id);
            var $event = $(eventHtml);
            var $event = sidebarDraggable($event,event);
            updateEventInDB(event);  
          }

          function sidebarEventHtml ($event,event){
            $event.html(event.title);
            $event.css({
                      "background-color": event.color,
                      "border-color": event.border_color || event.color
                   });  
          }
        }



        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- end initialize the sidebar ------------------------------------*/ 
        /*-----------------------------------------------------------------------------------------------------*/

        function isInstant(ev){
            var diff =moment(ev["start"]).diff(ev["end"]);
            return (diff  === 0 ) || (diff  === 1 );   
        }
 
        function updateEventArray(){ 
   


          var callendarEvents = $calendar.fullCalendar('clientEvents'); //loop only on calendar events
          var callendarEventsId=[];
          for (var i in callendarEvents){
            var callendarEvent = callendarEvents[i];
            if(Events[callendarEvent.id]){
              Events[callendarEvent.id] = callendarEvent;
              // console.log(callendarEvent.id+"_###found in calendar",Events[callendarEvent.id]) ;
            } 
          }

          $(".fc-event-draggable:visible").each(function(i){ 

            var id = parseInt($(this).find(".fc-event-id").text()); 
            Events[id]['elem'] = $(this);
          });
          console.log("###updateEventArray###") 
          console.log(Events) 
        }


        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- position ------------------------------------------------------*/
        /*-----------------------------------------------------------------------------------------------------*/ 



        var repositionTimeout,positionned ;
        var eventMargin = 3;
        var repositionTimeout = 10;
        function reposition(view){

          //avoid repeating this function 10 times...
          clearTimeout(repositionTimeout);
          repositionTimeout=setTimeout(function(){ 

            //update Event array
            updateEventArray();

            var colWidth = view.getColWidth();
            positionned=[];
            // console.log("##########################")
            // console.log("########reposition########"); 
            // console.log("##########################"); 
            
            var toppestParent = getToppestParent();
            if(!toppestParent)return;
            // console.log("toppestParent",toppestParent);
            positionBlock(toppestParent,colWidth,2);  
            
            for (var i in positionned){
              positionned[i]['isPositionned']=false;
              delete positionned[i]['range'];
              delete positionned[i]['count'];
              delete positionned[i]['minLeft']; 
            }
            positionned=[];
          },repositionTimeout);
        }

        function positionBlock(events,colWidth,parentZindex,parentPos,parentStart,parentEnd){ 
          // console.log(" ######positionBlocks######");
 
          colWidth-=eventMargin; 

          for (var i in events){
            var event = events[i];
            // console.log(event.id+"######");
            event['isPositionned'] = false;
            var elem = getDivById(event.id);
            if(!elem)  continue; //event is in another view
               

            //position left margin
            var elemProp = getProp(elem);
            if(parentPos){
              elem.css("left",parentPos.x+eventMargin/2);
              if(moment(parentStart).isSame(moment(event.start))){
               elem.css("top",elemProp.y+eventMargin/2+3); 
               elem.css("height",elemProp.h-eventMargin/2-1);
              }
              if(moment(parentEnd).isSame(moment(event.end))){
               // elem.css("top",elemProp.y+eventMargin/2); 
                elem.css("height",elemProp.h-eventMargin/2-3);
              }
            }

            //get brothers count and self range ( to calculate width and xPos)
            // console.log("getBroCountRange")
            getBroCountRange(event,events); 

            // console.log("event "+event.id+" has "+event.count+" bros. range = "+event.range+" minLeft = "+event.minLeft);
            var newColWidth = colWidth/(event.count+1)-(event.count+1)*eventMargin;
            // console.log("newColWidth : ",newColWidth,"left : ",event.minLeft+(event.range*newColWidth));
            if(event.allDay !==true){
              elem.width(newColWidth); 
              elem.css("left",event.minLeft+eventMargin/2+(event.range*(newColWidth+eventMargin))); 
            } 
            

            //set opacity to all children
            
            //z-index 
            elem.css('z-index',parentZindex+1)
            
            // console.log('OPACITY of'+event.id ); 
            
            var oldBorderColor = elem.css("border-color")
            elem.hover(function(){
              $(this).animate({"border-color":"#3F3F3F"},{queue:false})
              var elemEvent = getEventByDiv($(this));
              var childrenDiv = getChildren(elemEvent,{concat:true,onlyEvent:true,noSidebar:true});  
              for (var j in childrenDiv){
                var curChildDiv = getDivById(childrenDiv[j].id,{noSidebar:true}); 
                curChildDiv.animate({opacity:0.3},{duration:'fast',queue:false});
              }
            },function(){
              $(this).animate({"border-color":oldBorderColor},{queue:false})
              var elemEvent = getEventByDiv($(this));
              var childrenDiv = getChildren(elemEvent,{concat:true,onlyEvent:true,noSidebar:true}); 
              for (var j in childrenDiv){
                var curChildDiv = getDivById(childrenDiv[j].id,{noSidebar:true});
                curChildDiv.animate({opacity:1},{duration:'fast',queue:false})
              }
            }) 
            
            //end set opacity to all children 
            

            event.isPositionned = true;
            positionned.push(event);
            var children = getChildren(event,{concat:false,onlyEvent:true,noSidebar:true});
            // console.log("getChildren",children)
            elemProp = getProp(elem);

            positionBlock(children,newColWidth,parentZindex+1,elemProp,event.start,event.end);
  
          }
        }

        function getBroCountRange(event,events){
          var broCount=0;
          var broRange=0;
          var minLeft=getProp(getDivById( event.id )).x;
          //get bro range
          //
          var bros = getBros(event,events);
          
          for(var j in bros){
            var bro = bros[j];  
            //get bro range
            if(bro.isPositionned===true){
              console.log("bro was positionned");
              broRange++;
            }
              var broProp = getProp(getDivById(bro.id));
              console.log("minLeft",minLeft);
              console.log(getProp(getDivById(bro.id)));
              if (broProp.x < minLeft ){
                minLeft = broProp.x;
                console.log(minLeft);
              } 
          } 
          broCount = getBros(event,events).length;
          //get bro count 
          for(var j in bros){
            var bro = bros[j]; 
            var broOfBros = getBros(bro,events,event); 
            console.log("broOfBros "+bro.id+" :  ",broOfBros);
            console.log(event.id+"->"+bro.id+" bro of bro count :  ",broOfBros.length);
            var broCountTmp = broOfBros.length>0 ? 2 : 1 ;
            console.log(bro,event)
            // var broOfBro = getBros(bro,events,event.id); 
            broCount = Math.max(broCount,1,broOfBros.length);
            console.log(broCount)
            // alert("bro "+bro.id+" has "+brosOfBros.length +" bros ,\n event id : "+event.id)
            //get bro range
            // if(bro.isPositionned===true){
            //   var broProp = getProp(getDivById(bro.id));
            //   console.log("minLeft",minLeft);
            //   console.log(getProp(getDivById(bro.id)));
            //   if (broProp.x < minLeft ){
            //     minLeft = broProp.x;
            //     console.log(minLeft);
            //   }
            //   console.log("bro was positionned");
            //   broRange++;
            // }
 
          } 
          event['range'] = broRange;
          event['count'] = broCount;
          event['minLeft'] = minLeft; 
        }

        //get 
        function getBros(event,events,exclude){
          var bros=[];

          for(var j in events){
            var bro = events[j];
            if(bro.id === event.id ||(exclude!==undefined &&  bro.id === exclude.id)) continue;
            if(event.allDay  !== bro.allDay )continue;


            if(exclude===undefined){
              if(!moment(bro.start).isBefore(event.end) ||
                 !moment(bro.end).isAfter(event.start)) continue; 
            }else{
              if(isOutOf(bro,exclude))continue;
                console.log("getBros(event,events");
                console.log(bro);
                console.log(exclude);

            } 

            // console.log("looking for bro id");
            // console.log(bro.id); 
            

            bros.push(bro); 
            
          }
          return bros;
        }

        function getToppestParent(){
          var toppestParent = [];
          var events = $calendar.fullCalendar('clientEvents'); //loop only on calendar events

              // get toppest parent 
            for (var i in events){
              var event = events[i];
              var isSidebar =false;

              while(hasParent(event)){ 
                event = getElementAndEventbyId(event.parent.id);
                console.log(event);
                if(!event) return false; //not all event were  loaded
                isSidebar = $(event.element).hasClass("external-event");
                event = event.event;
              }

              //toppest parent
              if(isSidebar || $.inArray(event, toppestParent)!==-1 ){
                // console.log("event "+event.id+" already toppest") ;
                continue;
              }
              toppestParent.push(event); 
            }
            return toppestParent;
        }



        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- position ------------------------------------------------------*/
        /*-----------------------------------------------------------------------------------------------------*/




        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- parent/child  -------------------------------------------------*/
        /*-----------------------------------------------------------------------------------------------------*/

        //drag event to a calendar event
        //highlight 
        function setTooltip(element,event){
          var oldBorderColor = element.css("border-color");
          var overBorderColor = "green";
          element.droppable({
            over: function( ev, ui ) {
              if ( $(ui.draggable).hasClass("fc-event") ){
                $(this).css("border-color",overBorderColor);
              }
            },
            out: function( ev, ui ) { 
              if ( $(ui.draggable).hasClass("fc-event") ){
                $(this).css("border-color",oldBorderColor);  
              }
            },
            drop: function( ev, ui ) { 
              if ( $(ui.draggable).hasClass("fc-event") ){
                $(this).css("border-color",oldBorderColor);  

                var draggedEvent = dragged[1];
                if(draggedEvent.parent.id === event.id){
                  // already sub-event
                  return;
                }

                //check if it's going to do a loop in the tree
                if(isChild(draggedEvent,event)){
                  bootstrapAlert("stop");
                  bootstrapAlert("error","cannot set event <b>"+event.title+"</b> as child of <b>"+parent.title+"</b> because this is going to do a loop in the event tree","Circular reference : "); 
            
                  return;
                }
                setTimeout(function(){
                  if(isOutOf(draggedEvent,event))return;
                  // console.log("lol" ,draggedEvent)
                  $modalSetParent.modal('show').find(".sub-event").text(draggedEvent.title);
                  $modalSetParent.find(".super-event").text(event.title);

                  $modalSetParent.find('button.yes').off("click").click(function(){

                    //set parent and children relation
                    setParent(draggedEvent,event);
                    updateEventInDB(draggedEvent); 
                  });  
                },50)
                
              }
            }
          }); 
        }

        var draggedProp,draggedStart,children;

        function dragChildren(event){
          // console.log(event['start'])
          // console.log(draggedProp)
          // console.log("parentElement",parentElement.text(),parentElement)
          children = getChildren(event,{concat:true,noSidebar:true}); 
          draggedStart = moment(event['start']);
          var parentElement = getDivById(event.id);
          var draggedProp = getProp(parentElement);
          console.log("###children",children);
          $.each(children,function(i,child){ 
            $(child.element).fadeTo(200, 0.5);
          });
          // console.log("lol ",children);

          //update helper
          $(parentElement).off("mousemove").mousemove( function(ev){ 
            var newdraggedProp = getProp(parentElement);
            var diff = { 
              x : (draggedProp.x - newdraggedProp.x) , 
              y : (draggedProp.y - newdraggedProp.y)
            }; 
            if(diff.x !== 0  || diff.y !== 0 ){
              draggedProp =  newdraggedProp;  

              $.each(children,function(i,child){
                 // console.log(child)
                var childProp = getProp(child.element);
                // console.log("lol ",childProp);
                $(child.element).css("left",childProp.x-diff.x+"px")
                                .css("top",childProp.y-diff.y+"px");
              });
            }
          }); 
        }
        // set blockwidth

 
        function endDrag(event){ //end drag from calendar to calendar
      
          console.log("endDrag");
          //get diff
          var diff = moment(draggedStart).diff(moment(event['start'])); 

          //apply to children
          // if(event['allDay']===true){
          //   updateChildrenDate(event);
          // }else{
            $.each(children,function(i,child){

              // console.log("#draggin child : ",child );
              var childEvent = child.event;
               
              childEvent['start']  = moment(childEvent['start']).subtract(diff);
              childEvent['end']  = moment(childEvent['end']).subtract(diff);
              render(childEvent); 
            });
          // }
          if(hasParent(event)){
            var parent = getElementAndEventbyId(event.parent.id,{onlyEvent:true,noSidebar:true});
            // in sidebar
            if(!parent)return;
            if(!moment(parent['start']).isBefore(event['end']) ||
               !moment(parent['end']).isAfter(event['start'])){
              //event dropped out of parent
              console.log(" #### moved out ####"); 
              deleteParent(event); 
              render(event);

            }else{
              updateParentDate(event);
              render(event);
            }
          }

        }

        function isOutOfParent(event){
          if(!hasParent(event))return false;
          var parent = getElementAndEventbyId(event.parent.id,{onlyEvent:true,noSidebar:true});
          return (moment(parent['start']).isAfter(event['start']) ||
                  moment(parent['end']).isBefore(event['end']));
        }

        function isOutOf(event,parent){  
          return (moment(parent['start']).isAfter(moment(event['end'])) ||
                  moment(parent['end']).isBefore(moment(event['start'])));
        }

        var lastMoment;
        // endDragChildrenFromSidebar
        function SetRecurDate(event){
           
          var children = getChildren(event, {concat:false,onlyEvent:true});
          lastMoment = moment(event['start']);   
          event['start']  = lastMoment.format(); 
          lastMoment = lastMoment.add("minutes",30);
          event['end']  = lastMoment.format(); 
          if(!event.subChildren ||  children.length > 0) {
            for(var i in children){
              setRecurChildDate(children[i]); 
            } 
          }else{
              
              lastMoment = lastMoment.add("hours",1);
            } 
          lastMoment = lastMoment.add("minutes",30);
          event['end']  = lastMoment.format(); 
          deleteParent(event);

          console.log("event['end']",event['end']); 
        }



        function setRecurChildDate(event){ 
          event['start']  = lastMoment.format();
          // lastMoment = lastMoment.add("minutes",30);
          lastMoment = lastMoment.add("minutes",30);

          if(event.subChildren && event.subChildren.length > 0){
            for(var i in event.subChildren){
              setRecurChildDate(event.subChildren[i]); 
            }
          }else{
            
            lastMoment = lastMoment.add("hours",1);
          }

          lastMoment = lastMoment.add("minutes",30);

          event['end']  = moment(lastMoment).format();   
          var elem = getDivById(event.id);
          elem.remove();  

          render(event);
        } 


        /** 
         * @param parent        :  db model event
         * @param op            : concat(default true) onlyEvent(default false),noSidebar(default false), recursive(default true)
         *                       concat : ( boolean ) if true : dont preserve the tree nature of the relation (just concat them)
         * return children      : [{event:event,element:$element}, ... ]
         * events               : db modele events
         * elements             : jquery draggable div array;
         */
        function getChildren(parent,op){
          var children = [];
          if(!op)op={};
          // console.log("getChildren",parent)
          $.each(parent.children,function(i,child){
            if( !parent.children.hasOwnProperty( i ) ) return; 
            var cElandEv = getElementAndEventbyId(child.id,op);
            if( !cElandEv) return;

            if(op.recursive!==false){
              var subChildren;
              if(op.onlyEvent===true){
                subChildren = getChildren(cElandEv,op);
              }else {
                subChildren = getChildren(cElandEv.event,op); 
              }

              if (subChildren && subChildren.length > 0){
                if(op.concat===true)
                  children = children.concat(subChildren);
                else{
                  cElandEv['subChildren'] = subChildren;
                } 
              }
            }
            children.push(cElandEv );  

          });
          return children;
        }

        /** 
         * @param id : event id
         * @param op : noCalendar, noSidebar, onlyEvent
         * 
         * return children = [{event:event,element:$element}, ... ]
         * events   : db model events
         * elements : jquery draggable div array;
         */
        function getElementAndEventbyId(id,op){
          if(id==="" || !id)return ;
          if(!op)op={};
          var event;

          if(id==="" || !id)return ;
          if(!op)op={};
          var event = Events[id];
          if(op.noSidebar ===true && isInstant(Events[id]))return;
          if(op.onlyEvent === true)return event;
          return {event:event,element:event.elem};

          // if(op.noCalendar!==true)
          //   event = $calendar.fullCalendar( 'clientEvents', id )[0]; 

          // //look in sidebar event if not found
          // if(op.noSidebar !==true){ 
          //   $(".external-event").each(function(i,sidebarEvent){
          //     if( event)return;
          //     var ev = $(sidebarEvent).data('eventObject') ;
          //     // console.log("##",ev )
          //     if(ev && ev.id === id ){
          //      console.log("##FOUND IN SIDEBAR##",ev.id,ev);
          //       event = $.extend({},ev); 
          //     }
          //   }); 
          // }//end no sidebar

          // if(!event)return;
          // if(op.onlyEvent === true)return event;
          // // console.log("##",event ) 
          // var elem = getDivById(event.id); 
          // // if(!elem)return;
          // // alert(event.id);
          // // alert(elem)
          // // console.log("##",elem )  
          // return {event:event,element:$(elem)};
        }

        /**
        * @param id : event i
        * get div with hidden div containing event id
        * <div class='fc-event-id hide'>event.id</div>
        */ 

        function getDivById(id){
          console.log(id,Events[parseInt(id)])
          return Events[parseInt(id)]['elem'];
        }

        function getEventByDiv(div){
          var id = div.find(".fc-event-id").text();
          return getElementAndEventbyId(id,{onlyEvent:true,noSidebar:true});
        }

        // remove relation with old parent if exists
        // and update relation with new parent
        function setParent(event,parent){


          deleteParent(event);
          //check if this is going to do a loop in the tree 
          if(isChild(parent,event)){
            bootstrapAlert("error","cannot set event <b>"+event.title+"</b> as child of <b>"+parent.title+"</b> because this is going to do a loop in the event tree","Circular reference : "); 
            return;
          }
 
          //affect parent to child
          event.parent = { "id": parent.id};
          //add child to parent
          parent.children.push( { "id": event.id});  

          //update parentDate
          updateParentDate(event);
          render(event); 
          render(parent); 
           
        }

        function updateParentDate(event){
          //check if the event has been dropped out of the parent 
          if(isOutOfParent(event)){
              //event is out of parent
              console.log(" #### DEPASSE#### DEPASSE#### DEPASSE#### DEPASSE"); 
              var parent = getElementAndEventbyId(event.parent.id).event;
              var Eduration = moment(event['end']).diff(event['start']); 

              //event start is before parent start
              if(moment(event['start']).isBefore(parent['start'])){
                // event['start'] = parent['start'];
                parent['start'] = event['start'];

                event['end'] = moment(event['start']).add(Eduration).format();
              }
              //event end is after parent end
              if(moment(event['end']).isAfter(parent['end'])){
                // event['end'] = parent['end']; 
                parent['end'] = event['end'];

                event['start'] = moment(event['end']).subtract(Eduration).format();
              } 
              if(hasParent(event)){
                var p = getElementAndEventbyId(event.parent.id);
                updateParentDate(p.event);
              }
              render(parent);
          } 
        }

        function updateChildrenDate(event){
          var children = getChildren(event, {concat:false,recursive:false,onlyEvent:true}); 
          // console.log("OLOLOLOL",children);
          var Eduration = moment(event.end).diff(event.start); 
          for(var i in children)
          {
            var child = children[i];
            var Cduration = moment(child.end).diff(child.start); 
            //TODO check if not less than 30mn
            if(isOutOfParent(child)) 
            { 
              console.log("#######CHILD OUT OF DRAGGED#########");
              var childStart = child['start'],
                  childEnd = child['end'];
              //child start is before event start
              if(moment(child['start']).isBefore(event['start']))
              {
                // event['start'] = parent['start'];
                childStart = event['start'];

                childEnd = moment(childStart).add(Cduration).format();
              }
              //child end is after child start
              if(moment(child['end']).isAfter(event['end']))
              {
                // event['start'] = parent['start'];
                childEnd = event['end']; 

                childStart = moment(childEnd).subtract(Cduration).format(); 
              } 
              if(Cduration>Eduration){
                childStart = event['start'];
                childEnd = event['end'];
              }
              child['start'] = childStart;
              child['end'] = childEnd;
              updateChildrenDate(child);
              render(child);
            } 
          }
        }

        function isChild(parent,event){
            if(event.event)var event = event.event;
            //check if it's going to do a loop in the tree
 
            var children = getChildren(parent, {concat:true,onlyEvent:true}); 
            // console.log("OLOLOLOL",children);
            for(var i in children){
                if(children[i].id === event.id){ 
                  return true;  
                }
            }
            return false;
        }

        function hasChild(event){
            if(event.event){
              event = event.event;
            } 
            //check if it's going to do a loop in the tree

            var children = getChildren(event,  {concat:true,onlyEvent:true});
            if(!children || children.length < 1)
              return false;
            return true;
        }

        function deleteParent(event){   
          if(!event || !hasParent(event))return;
              
          parent = getElementAndEventbyId(event.parent.id)  ;
          parent = parent.event;
          event.parent.id = "";
          event.parent.title = "";
          event.parent.name = "";
          for( var i in parent.children){
            if(parent.children[i].id === event.id && event.id !== ""){ 
              delete parent.children[i];
              return;
            }
          } 
        }

        function hasParent(event){
          // alert(event.id+", parent : "+event.parent.id);
          return !(!event.parent || !event.parent.id || event.parent.id==="");
        }

        jQuery.fn.cssNumber = function(prop){
          var v = parseInt(this.css(prop),10);
          return isNaN(v) ? 0 : v;
        };

        function getProp(elem){
          return {
              y: $(elem).cssNumber("top"),
              x: $(elem).cssNumber("left"),
              w: $(elem).cssNumber("width"),
              h: $(elem).cssNumber("height")
            };
        }



        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- end parent/child ----------------------------------------------*/
        /*-----------------------------------------------------------------------------------------------------*/

      // empty fullcalendar events and populate it with new
      var Events = {};
      function renderEvent(events){
        $calendar.fullCalendar( 'removeEvents');
        //TODO ALLDAY
        var instant_events   = [];
        var callendar_events = [];
        for (var i in events){  
          events[i]["title"]  = events[i].name; 
          events[i]["start"]  = events[i].start_at;
          events[i]["end"]    = events[i].end_at; 
          events[i]["allDay"] = events[i].is_allday==="true";

          delete events[i]["url"];
          // console.log(events[i].categories);
          if(events[i].categories.length > 0 && events[i].categories[0].color)
            events[i]["background-color"] = events[i].categories[0].color;
          
          var diff =moment(events[i]["start"]).diff(events[i]["end"]);
          events[i]["instant"] = (diff  === 0 ) || (diff  === 1 );  
          Events[events[i]["id"]] = events[i];
          if(events[i]["instant"]){
            instant_events.push(events[i]);
          }else{ 
              $calendar.fullCalendar( 'renderEvent',events[i]);
          }
        } 
        setInstantEvents(instant_events);
      }

      function render(event){
        formatDate(event);

        updateEventInDB(event); 
        // render the event on the calendar
        $calendar.fullCalendar('removeEvents', event.id); 
        $calendar.fullCalendar('renderEvent', event); 
      }
      function updateEventInDB(event){
          var ev = $.extend( {} , event );
          delete ev.elem;
              $.post(
                op.quickUpdateUrl,
                formatDate(ev),
                function(doc) {   
                        bootstrapAlert("success","event <b>"+event['title']+"</b> has been well updated"); 
                },
                'json'
              );
              bootstrapAlert("info","update request sent ","Info : ","<i class='icon-spinner icon-spin'></i>");
      }
    });
    
     function formatDate(e){ 
        e['start'] = moment(e['start']).format();
        e['end'] = moment(e['end']).format();
        return e;
     }

    </script>    
	
{% endblock javascripts %}

