{% extends 'fibeWWWConfBundle::base.html.twig' %}


{% block title %}Schedule{% endblock title %}




{% block body %} 
  {{ parent() }}
      

<div id='calendar'></div> 
<div id="sidebar">  
  <div class="checkbox">
    <label>
      <input id="reposition" type="checkbox"> Reposition parent/child <small>(<i>alpha</i>)</small>
    </label>
  </div> 
  <div class="history hide">
    <button id="backwardBtn" class="btn btn-default" disabled="disabled" ><i class="icon-undo"></i></button>
    <button id="forewardBtn" class="btn btn-default" disabled="disabled" ><i class="icon-repeat"></i></button>
  </div>
  <div id="filters">  

    <h4>Filter by categories</h4>
    <div class="filter">
      <select multiple class="form-control" data-filter="category_ids">
        {% for category in categories %}
          <option data-color="{{category.color}};" value="{{category.id}}">{{category.name}}</option>
        {% endfor %}
      </select>  
    </div>

    <h4>Filter by locations</h4>
    <div class="filter">
      <select multiple class="form-control" data-filter="location_ids">
        {% for location in locations %}
          <option value="{{location.id}}">{{location.name}}</option>
        {% endfor %}
      </select>  
    </div> 

    <h4>Filter by theme</h4>
    <div class="filter">
      <select multiple class="form-control" data-filter="theme_ids">
        {% for theme in themes %}
          <option value="{{theme.id}}">{{theme.name}}</option>
        {% endfor %}
      </select>  
    </div>
  </div>

  <h4>Dateless Events</h4>
  <div id='external-events'>
  </div> 
</div>  


<div id="modal"  class="modal fade">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3 class="modal-title">Edit event</h3>
      </div>
      <div class="modal-body">
        <p>One fine body&hellip;</p>
      </div> 
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
 
<div id="modal-new-event"  class="modal fade">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3 class="modal-title">Event creation</h3>
      </div>
      <form>
        <div class="modal-body">
          <div class="input-group input-group-lg"> 
            <input name="name" id="name" type="text" class="form-control input-lg" placeholder="Give me a name!">
          </div> 
        </div>
        <div class="modal-footer">
          <a  class="btn btn-default" data-dismiss="modal">Close</a>
          <button type="submit" class="btn btn-primary">Save changes</button>
        </div>
      </form>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
 
<div id="modal-set-parent"  class="modal fade">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3 class="modal-title"> 
          <span class="icon-stack">
            <i class="icon-sign-blank icon-stack-base"></i>
            <i class="icon-sitemap icon-light"></i>
          </span>  
          Affect parent
        </h3>
      </div>
      <div class="modal-body"> 
        Set 
        <p class="sub-event event-name well"></p> 
        as sub event of 
        <p class="super-event event-name well"></p>
        ?
      </div> 
      
      <div class="modal-footer row-fluid">
        <div class="col-lg-6"><button class="col-md-6 btn btn-default btn-block no" data-dismiss="modal"><i class='icon-remove'></i> no</button></div>
        <div class="col-lg-6"><button class="col-md-6 btn btn-success btn-block yes" data-dismiss="modal"><i class='icon-ok'></i> ok</button></div>
      </div>

    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
 


{% endblock %}



 {% block stylesheets %}
  {{ parent() }}
 
    <!--
    <link rel='stylesheet' type='text/css' href='http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.2/themes/start/jquery-ui.css' />
    --> 

<link href="{{ asset('bundles/fibewwwconf/js/fullcalendar/fullcalendar.css') }}" rel='stylesheet' />
<link href="{{ asset('bundles/fibewwwconf/js/fullcalendar/fullcalendar.print.css') }}" rel='stylesheet' media='print' /> 
  <link href="{{ asset('bundles/fibewwwconf/css/fullcalendarAddedUI.css') }}" rel='stylesheet'/>  
{% endblock stylesheets %}



{%  block javascripts %}   
  {{ parent() }} 
  <script src="{{ asset('bundles/fibewwwconf/js/moment.min.js') }}" type="text/javascript" ></script>
       
  <!-- <script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/jquery-ui-1.10.3.custom.min.js') }}"></script> -->
  <script type="text/javascript" src="{{ asset('js/jquery-ui-1.10.3.custom.js') }}"></script>
  <script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/fullcalendar.js') }}"></script>

  <script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/added/filter.js') }}"></script>
  <script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/added/sidebar.js') }}"></script>

  <script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/added/CalEvent.js') }}"></script>
  <script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/added/EventCollection.js') }}"></script>
    
  <script type="text/javascript">
    var Events;
    var mainConfEvent;
    var dragged = null;
    var $sidebar;
    var $calendar;
    //path
    var DATA_FEED_URL = "{{ path('schedule_view_event_get') }}";
    var op = {  
        getOrderedUrl     : "{{ path('exporter_api', { 'entity_reference': 'schedule_event','_format': 'json' }) }}?conference_id={{currentConf.id}}",
        updateUrl     : "{{ path('schedule_view_event_edit') }}", //event modal form
        quickAddUrl   : DATA_FEED_URL + "?method=add", 
        quickUpdateUrl: DATA_FEED_URL + "?method=update",
        quickDeleteUrl: DATA_FEED_URL + "?method=remove",
        data          : {}
    }; 

    $(document).ready(function() {    

      //init $ vars
      var $modal = $('#modal').hide();
      var $modalNewEvent = $('#modal-new-event').hide();
      var $modalSetParent = $('#modal-set-parent').hide();
      var $modalBody = $modal.find(".modal-body");
      var $modalNewEventBody = $modalNewEvent.find(".modal-body"); 
      
      $calendar = $('#calendar');
      $sidebar = $('#external-events');

      // get first day
      var firstDay = moment('5000-10-10');
      {% if currentConf.events|length > 0 %}
          if(moment('{{currentConf.events[0].startAt|date("Y-m-d")}}').isBefore(firstDay)){
              firstDay = moment('{{currentConf.events[0].startAt|date("Y-m-d")}}');
          } 
      {% endif %} 
      if(firstDay.isSame(moment('5000-10-10'))) firstDay = moment(); 



      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------- render events from json datasource -----------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/

      // empty fullcalendar events and populate it with new
      var fetched = false;
      var calendar_events   = []; 
      function renderEvents(events,callback){
          Events = {};
          $calendar.fullCalendar( 'removeEvents'); 

          var instant_events   = [];  
          calendar_events   = []; 
          var i = 0;
          //non-blocking loop
          function doWork() {
 
            var event = new CalEvent(events[i]); 

            if(event.isInstant()){
              instant_events.push(Events[events[i]["id"]]); 
            }else{ 
                calendar_events.push(Events[events[i]["id"]]); 
                // $calendar.fullCalendar( 'renderEvent',event);
            } 
            if(event.mainconfevent){
              mainConfEvent = event;
            }
          
            i++; 

            //last iteration  
            if (!events[i]) {

              //populate sidebar
              sidebar.setInstantEvents(instant_events); 

              fetched = true; 
              $calendar.fullCalendar('refetchEvents');

            }else if (stopRender!==true){ 
              //the loop goes on
              setTimeout(doWork, 1);
            }       
          };
          var stopRender = false;
          $calendar.off("stopRender").on("stopRender",function(){
            stopRender = true;
          })
          if(events[i])setTimeout(doWork, 1);
      } 
 
      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- fullcalendar options ------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/ 
      var calendarOption = { 
          header: {
              left: 'prev,next today',
              center: 'title',
              right: 'month,agendaWeek,agendaDay'
          }, 
          editable: true,
          year: firstDay.year(), 
          month: firstDay.month(),
          date: firstDay.date(),
          //get events
          events : function(start, end, callback) { 
              var stopRender = false;
              $calendar.off("stopRender").on("stopRender",function(){
                stopRender = true;
              }); 

              //events have already been fetched
              if(fetched === true){
                fetched = false;
                callback(calendar_events );
                return;
              }
              
              op.data['before']=moment(end).format();
              op.data['after']=moment(start).format();
              $.get(
                op.getOrderedUrl,
                op.data,
                function(events) {  
                    if(stopRender===true)return;
                    bootstrapAlert("success",events.length+" events have been well fetched" );
                    renderEvents(events,callback);
                    //$calendar.fullCalendar('renderEvent',e  ); // 3rd arg make the event "stick" 
                },
                'json'
              ).error(function(jqXHR, textStatus, errorThrown) {
                bootstrapAlert("warning","there was an error during the fetch of events",""); 
              });
              bootstrapAlert("info","event request sent","","<i class='icon-spinner icon-spin'></i>");
          },
          eventClick: function(calEvent, jsEvent, view) {  
              $.ajax({
                  url: op.updateUrl+"?id="+calEvent.id,  
                  success: function(doc) {
                      $modal.modal("show");
                      $modalBody.html(doc);
                      bootstrapAlert("stop");

                          // rerender if changed
                      $modalBody.find("#eventForm,#delete-event-form").submit(function(){
                        $modal.off('hidden.bs.modal').on('hidden.bs.modal', function () {
                          $calendar.fullCalendar( 'refetchEvents' ) 
                        })
                      }) 
                  }
              }); 
              bootstrapAlert("info","edit <b>"+(calEvent['title'] || calEvent['name'])+"</b> request sent","Info : ","<i class='icon-spinner icon-spin'></i>");  
          },
          selectable: true,
          selectHelper: true,
          select: function(start, end, allDay) { //new event
              $modalNewEvent.modal("show")
                            .on('shown.bs.modal', function() {
                                $(this).find("#name").focus();
                            });

              $modalNewEvent.find("form").off("submit").submit(function(e){
                var title = $(this).find("#name").val();
                if (title) {
                    var tmp = {
                        title    : title,
                        parent   : {id:mainConfEvent.id},
                        children : [],
                        start    : start,
                        end      : moment(start).isSame(moment(end)) ? moment(start).add("hours",1).format() : end,
                        allDay   : allDay
                    }; 
                    console.log(tmp)
                    $.post(
                            op.quickAddUrl,
                            $.extend( {} , tmp ),
                            function(response) {  
                                bootstrapAlert("success","event <b>"+tmp['title']+"</b> has been well added");
                                tmp.id =response.id;
                                var ev = new CalEvent(tmp);  
                                Events[ev.id] = ev;
                                ev.setParent(mainConfEvent);
                                ev.updateParentDate();
                                ev.render();
                                // $calendar.fullCalendar('renderEvent',ev); // 3rd arg make the event "stick"
                            },
                            'json'
                    );
                    bootstrapAlert("info","add request sent","Info : ","<i class='icon-spinner icon-spin'></i>");
                  $modalNewEvent.modal("hide");
                }else{
                    bootstrapAlert("info","You must give a name to the event");
                }
                return false;
              });
              $calendar.fullCalendar('unselect');
              
          },
          eventResize: function(event,dayDelta,minuteDelta,revertFunc) {
              setTimeout(function(){ //bug... event isn't yet updated 
                    event.updateParentDate();
                    event.updateChildrenDate();
                    event.render();
                    event.persist(); 
              },1);//bug... event isn't yet updated 
          }, 
          eventDrop : function(event){ //drop from calendar
            // EventCollection.eventsToRender.push(event["id"]);
              event.persist(); 
          }, 
          eventAfterAllRender: function( view ) { 
              //avoid repeating this function 10 times...
              clearTimeout(repositionTimeout);
              repositionTimeout=setTimeout(function(){   
                  if(!mainConfEvent)return;
                  updateEventArray();

              if(view.name !== "month")reposition(view); 
              },repositionTimeout);
                  
          }, 
          droppable: true, // allows things to be dropped into the calendar
          drop: function(date, allDay) { //drop from sidebar
          
              // retrieve the dropped element's stored Event Object 
              var event = dragged[1]; 
              // var event = $.extend({},dragged[1]);  
              event.elem.remove();
              // delete event.elem;
              event.allDay = allDay;
              event['start'] = date;
              // event = new CalEvent(event); 
              console.log("dropped from sidebar", event);
              // assign it the date that was reported
              
              // e['end'] = moment(date).add("hours",1).format();

              event.SetRecurDate();
              // event.deleteParent();
              Events[event.id] = event;

              event.setParent(mainConfEvent);
              event.updateParentDate();
              event.persist();
              event.render();


              // render the event on the calendar  
                
          },
          eventDragStart: function( event, jsEvent, ui, view ) { 
              dragged = [ ui.helper[0], event ];
              setTimeout(function(){ //bug... event isn't yet updated 
                dragChildren(event, jsEvent, ui, view);
              },1);//bug... event isn't yet updated
          },
          eventDragStop: function( event, jsEvent, ui, view ) {  
              dragged = [ ui.helper[0], event ]; 
              //save children to db
              setTimeout(function(){ //bug... event isn't yet updated 
                endDrag(event,ui.helper[0] );
              },1);//bug... event isn't yet updated 
          }
      };
      $calendar.fullCalendar(calendarOption);  
      $calendar.fullCalendar('changeView', "agendaWeek" ); 

      /*-------------------------------------------------------------------------------------------------*/
      /*------------------------------------- initialize sidebar ----------------------------------------*/
      /*-------------------------------------------------------------------------------------------------*/
      
      var sidebar = new Sidebar('#external-events')
      //dropped on the sidebar;
      $(sidebar).on("dropped",function(ev,calEvent){  
          console.log("dropped",event)
          var event = Events[calEvent.id];
          event.deleteParent();
          EventCollection.fitMainConfEvent();

          //set as sidebar draggable element  and then affect children 
          sidebar.setSidebarEvent(event);

          //set as instant event 
          event['end'] = moment(event['start']);
          event.formatDate();
          // remove event from calendar 
          $calendar.fullCalendar('removeEvents',event.id); 
          event.persist();  

          var children = EventCollection.getChildren(event, {concat:true,onlyEvent:true} ); 
          $.each(children,function(i,child){
              sidebar.setSidebarEvent(child); 
              //set as instant event 
              child['end'] = moment(child['start']);
              child.formatDate();
              // remove event from calendar 
              $calendar.fullCalendar('removeEvents',child.id);  
              child.persist();
          });
          // updateEventArray();
      }).on("drag",function(ev,event){ 
          dragChildren(event);
      }); 

      /*-------------------------------------------------------------------------------------------------*/
      /*------------------------------------- update function -------------------------------------------*/
      /*-------------------------------------------------------------------------------------------------*/

      /**
       * function triggered after all events have been rendered 
       */
      function updateEventArray(){ 
          var calendarEvents = $calendar.fullCalendar('clientEvents'); //loop only on calendar events

          for (var i in calendarEvents){
            var calendarEvent = calendarEvents[i];
            if(Events[calendarEvent.id]){
              Events[calendarEvent.id] = calendarEvent;
              // console.log(calendarEvent.id+"_###found in calendar",Events[calendarEvent.id]);
            } 
          }

          $(".fc-event-draggable:visible").each(function(i){ 
            var id = parseInt($(this).find(".fc-event-id").text()); 
            //$.inArray()
            if(Events[id])Events[id]['elem'] = $(this);
          });
          console.log("###event array updated###");
          // console.log("changed events :",EventCollection.eventsToRender);
          // console.log(Events) 

          //if we render from history, dont store the state
          // if(!History.isRenderingStateFromHistory()){
          //     History.storeState(Events);
          // }
      }


      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- position ------------------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/ 

      /**
       *  add UI (popover, border color etc...)
       *  just after to the fullcalendar "all event render" function
       */
 
      var repositionTimeout = 10;
      function reposition(view){

          var repositionTimeout,
              eventMargin  = 4,
              popoverWidth = 276,
              colWidth     = view.getColWidth(),
              startScript ; 

              // toppestParent = EventCollection.getToppestEventsToRender();
              
              toppestParent = EventCollection.getToppestParent(view);

          console.log("toppest parent : ",toppestParent);
          if(!toppestParent)return;
          // console.log("toppestParent",toppestParent);
          
          stylizeBlock(toppestParent); 

          if($('#reposition').is(':checked')){ 
            //non-blocking
                  setTimeout(function(){ 
                    positionBlock(toppestParent,colWidth,2);
                  },1)
          }
          function positionBlock(events,colWidth,parentZindex,parentPos,parent){ 
                  
                  // console.log(" ######positionBlocks######");
                  
                  colWidth -=eventMargin; 
                  var broCountRange = EventCollection.getBroCountRange(events)
                  console.log("##getBroCountRange## ",broCountRange);  


                  for (var i in events){

                    var event = events[i]; 
                    // console.log("positionning : ",event.id);
                    var element = event.elem; 
                    if(!element)  continue; //event is in another view
                        
                    var elemProp = getProp(element); 
                    var newColWidth;

                    // repositionning (width and Xpos) 
                    //positionning event to be over the parent
                    var count   = broCountRange[event.id].count,
                        range   = broCountRange[event.id].range,
                        left = broCountRange[event.id].minLeft;
                    console.log("event "+event.id+" has "+count+" bros. range = "+range+" minLeft = "+left);

                    //width
                    newColWidth = colWidth/(count)-(count)*eventMargin/2;
                    element.width(newColWidth);

                     
                    //left margin for events to respect hierarchy
                    
                    if(parentPos){
                      left = parentPos.x+eventMargin/2;
                      if(moment(parent.start).isSame(moment(event.start))){
                        element.css("top",elemProp.y+eventMargin/2+5); 
                        element.css("height",elemProp.h-eventMargin/2-5);
                      }
                      if(moment(parent.end).isSame(moment(event.end))){
                        // element.css("top",elemProp.y+eventMargin/2); 
                        element.css("height",elemProp.h-eventMargin/2-5);
                      } 
                    } 

                    left += (range*(newColWidth+eventMargin)); 
                    if(left)element.css("left",left); 
                    console.log(left)  

                    //z-index 
                    element.css('z-index',parentZindex+1)  
                    // end repositionning (width and Xpos)
                    
                    var children = EventCollection.getChildren(event,{concat:false,onlyEvent:true});
                    // console.log("elem",children)
                    if(children.length>0){
                      elemProp = getProp(element);
                      positionBlock(children,newColWidth,parentZindex+1,elemProp,event);
                    }
                  }
       
          }
          function stylizeBlock(events){ 

                    /*****************  styling (opacity, hover, drag, drop) ********************/
                 
                for (var i in events){
                    var event = events[i]; 
                    console.log("positionning : ",event.id);
                    var element = event.elem; 
                    if(!element)  continue; //event is in another view

                    //action on hovered by another dragging event  
                    element.data("border-color",element.css("border-color"))
                           // .data("background-color",element.css("background-color"))
                           .data("prop",getProp(element));
                    var overBackgroundColor = "green";
                    var shortestDragOverEvent = null;
                    var lastShortestDragOverEvent = null;
                    element.droppable({
                        over: function( ev, ui ) {
                          if ( $(ui.draggable).hasClass("fc-event") ){ 
                            var event = EventCollection.getEventByDiv($(this));
                            var draggedEvent = dragged[1];
                            if(draggedEvent.parent.id === event.id){
                              // already sub-event
                              return;
                            }

                            //check if it's going to do a loop in the tree
                            if(event.isChild(draggedEvent)){
                              return;
                            }
                            if(!shortestDragOverEvent ) shortestDragOverEvent = event;

                            if(shortestDragOverEvent.duration() >= event.duration()){
                              shortestDragOverEvent.elem.css({"outline":"0px dashed green"});
                              lastShortestDragOverEvent = shortestDragOverEvent;
                              shortestDragOverEvent = event;
                              $(this).css({"outline":"3px dashed green"});
                            }
                            // $(this).animate({"background-color":overBackgroundColor},{queue:false});
                            
                          }
                        },
                        out: function( ev, ui ) { 
                          if ( $(ui.draggable).hasClass("fc-event") ){
                            // $(this).animate({"background-color":$(this).data("background-color")},{queue:false});
                            $(this).css({"outline":"0px dashed green"});
                            var event = EventCollection.getEventByDiv($(this)); 
                            if(lastShortestDragOverEvent && lastShortestDragOverEvent.id === event.id){  
                              // console.log (lastShortestDragOverEvent.title +" was lastShortest")
                              // console.log (" Shortest is" + shortestDragOverEvent.title)
                              lastShortestDragOverEvent = null;
                              // if(shortestDragOverEvent.elem) shortestDragOverEvent.elem.css({"outline":"3px dashed green"});
                            }
                            if(shortestDragOverEvent && shortestDragOverEvent.id === event.id){ 
                              // console.log (shortestDragOverEvent.title +" was shortest")
                              // console.log (" lastShortest is" + lastShortestDragOverEvent.title)
                              shortestDragOverEvent = lastShortestDragOverEvent;
                              lastShortestDragOverEvent = null;
                              if(shortestDragOverEvent) shortestDragOverEvent.elem.css({"outline":"3px dashed green"});
                            }
                          }
                        },
                        drop: function( ev, ui ) { 
                          if ( $(ui.draggable).hasClass("fc-event") ){ 
                            // $(this).animate({"background-color":$(this).data("background-color")},{queue:false});
                            $(this).css({"outline":"0px dashed green"});
                            
                            var event = EventCollection.getEventByDiv($(this));
                            if(shortestDragOverEvent && shortestDragOverEvent.id === event.id){
                              shortestDragOverEvent = null;
                              lastShortestDragOverEvent= null;
                            }else{
                              return;
                            }

                            var draggedEvent = dragged[1];
                            if(draggedEvent.parent.id === event.id){
                              // already sub-event
                              return;
                            }

                            //check if it's going to do a loop in the tree
                            if(event.isChild(draggedEvent)){
                              bootstrapAlert("stop");
                              bootstrapAlert("info","cannot set event <b>"+event.title+"</b> as child of <b>"+draggedEvent.title+"</b> because this is going to do a loop in the event tree","Circular reference : "); 
                        
                              return;
                            } 
                            setTimeout(function(){
                              if(event.isOutOf(draggedEvent))return;
                              // console.log("lol" ,draggedEvent)
                              $modalSetParent.modal('show').find(".sub-event").text(draggedEvent.title);
                              $modalSetParent.find(".super-event").text(event.title);

                              $modalSetParent.find('button.yes').off("click").click(function(){

                                //set event as parent of draggedEvent and children relation
                                draggedEvent.setParent(event);
                                draggedEvent.updateParentDate();
                                draggedEvent.render();
                                draggedEvent.persist(); 
                              });  
                            },1)
                            
                          }
                        }
                    }); //end droppable
    
                    //action on hover (children opacity and bootstrap popover)
                    element
                        .popover({
                                trigger : 'hover',
                                html : true,
                                placement : function( context,source){
                                  var popoverProp = getProp($(context));
                                  var eventProp = getProp(source);
                                  var calendarProp = getProp($calendar);
                                  // console.log(popoverProp,eventProp,calendarProp)
                                  if(eventProp.x + eventProp.w + popoverWidth < calendarProp.x + calendarProp.w )
                                    return "right";
                                  if(eventProp.x - popoverWidth > calendarProp.x)
                                    return "left";
                                  return "bottom";
                                },
                                title : ' <b><span class="muted">#'+event.id+'</span> '+event.title+'</b>',
                                content : event.getPopoverContent(),
                        })
                        .hover(function(){
                              //enter
                              $(this).animate({"border-color":"#3F3F3F"},{queue:false});

                              var elemEvent = EventCollection.getEventByDiv($(this));
                              var childrenDiv = EventCollection.getChildren(elemEvent,{concat:true,onlyEvent:true});
                              for (var j in childrenDiv){
                                var curChildDiv = EventCollection.getDivById(childrenDiv[j].id);
                                if(!curChildDiv)continue;
                                curChildDiv.animate({opacity:0.3},{duration:'fast',queue:false});
                              }
                        },function(){
                              $(this).animate({"border-color":$(this).data("border-color")},{queue:false})
                              var elemEvent = EventCollection.getEventByDiv($(this));
                              var childrenDiv = EventCollection.getChildren(elemEvent,{concat:true,onlyEvent:true});
                              for (var j in childrenDiv){
                                var curChildDiv = EventCollection.getDivById(childrenDiv[j].id );
                                if(!curChildDiv)continue;
                                curChildDiv.animate({opacity:1},{duration:'fast',queue:false})
                              }
                    });  

                    // end styling (opacity, hover, drag, drop)
                    
 
                    var children = EventCollection.getChildren(event,{concat:false,onlyEvent:true});
                    // console.log("elem",children)
                    // 
                    if(children.length>0){
                      elemProp = getProp(element);
                      stylizeBlock(children);

                    }

                  }
               
          // EventCollection.eventsToRender=[]; 
            
          }; 
      }

      



      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- position ------------------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/




      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- drag children  ------------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/
 

      var draggedProp,draggedStart,children;

      function dragChildren(event){
        // console.log(event['start'])
        // console.log(draggedProp)
        // console.log("parentElement",parentElement.text(),parentElement)
        children = EventCollection.getChildren(event,{concat:true}); 
        draggedStart = moment(event['start']); 

        // $.each(children,function(i,child){ 
        //   $(child.elem).fadeTo(200, 0.5);
        // });
        // console.log("lol ",children);

        //update helper
        var draggedProp = getProp(event.elem)
        $(event.elem).off("mousemove").mousemove( function(ev){ 
          var newdraggedProp = getProp(event.elem);
          var diff = { 
            x : (draggedProp.x - newdraggedProp.x) , 
            y : (draggedProp.y - newdraggedProp.y)
          }; 
          if(diff.x !== 0  || diff.y !== 0 ){
            draggedProp =  newdraggedProp;  

            $.each(children,function(i,child){
               // console.log(child)
              var childProp = getProp(child.elem);
              // console.log("lol ",childProp);
              $(child.elem).css("left",childProp.x-diff.x+"px")
                              .css("top",childProp.y-diff.y+"px");
            });
          }
        }); 
      } 


      function endDrag(event){ //end drag from calendar to calendar
    
        console.log("endDrag");
        //get diff
        var diff = moment(draggedStart).diff(moment(event['start']));
        if(diff===0)return;

        //apply to children 
        $.each(children,function(i,child){
 
                  
              // console.log("#draggin child : ",child ); 
               
              child['start']  = moment(child['start']).subtract(diff);
              child['end']  = moment(child['end']).subtract(diff);
              child.render();
              child.persist(); 
   
        }); 
        //apply to parent
        var parent = EventCollection.find(event.parent.id,{noSidebar:true});
        if(parent){
          // return if not in callendar view  
          if(event.isOutOf(parent,true)){
            //event dropped out of parent
            console.log(" #### moved out ####");  
            event.setParent(mainConfEvent);
            event.updateParentDate();
            event.render();
          }else{
            //still inside but may need a parent update (to properly contains child)
            event.updateParentDate();
            event.render();
          }
        } 
      } 



      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- initialize filters --------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/
 

        //init filters
        var filter = new initFilter();
        $(filter).on("change", function(ev,key,val) {
            console.log(op.data);
            console.log(val);
            console.log(key);
            op.data[key] = val;
            $calendar.trigger("stopRender");
            $calendar.fullCalendar('refetchEvents');   
        });


        /*-----------------------------------------------------------------------------------------------------*/
        /*------------------------------------- History -------------------------------------------------------*/
        /*-----------------------------------------------------------------------------------------------------*/ 


      //render an Events array
      //TODO look at eventResize and eventDrop  revertFn 
      function renderHistory(events){
          console.log("renderHistory",events);
          Events = events;
          var instant_events   = []; 
          $calendar.fullCalendar( 'removeEvents');
          storeinHistory = false;
          for (var i in Events){
            var event = Events[i]; 
            if(events[i].isInstant()){
              instant_events.push(event);
            }else{ 
                $calendar.fullCalendar( 'renderEvent',event);
            } 
          }
          setInstantEvents(instant_events); 
      }

      //init history
      History.setForewardBtn($('#forewardBtn'))
             .setBackwardBtn($('#backwardBtn')); 
      $(History).on('updateState',function(ev,events){ 
        renderHistory(events);
      })
    });//end $(document).ready


    var History = {
        _statesHistory : [],
        _currentState : -1,
        _backwarded : false,

        _backwardBtn : '',
        _forewardBtn : '',
        
        _forewardBtn : '',
        _renderingState : true,
        isRenderingStateFromHistory : function(){
          if(this._renderingState===true){
            this._renderingState = false;
            return true;
          }
          return false;
        },
        setBackwardBtn : function(btn){
          this._backwardBtn = $(btn);
          this._backwardBtn.click(function(){History._backward()}); 
          return this;
        },
        setForewardBtn : function(btn){
          this._forewardBtn = $(btn);
          this._forewardBtn.click(function(){History._foreward()});   
          return this;
        },
        storeState : function(model){
          console.log("history state stored");
          var state = jQuery.extend(true, {}, model); 
          var arraySplice = this._backwarded ? 2000 : 0; 
          this._backwarded = false;
          this._currentState++;
          this._statesHistory.splice(this._currentState,arraySplice,state);
          this._checkBtn();
          return this;
        },
        //pseudo private methods

        //disable btn
        _checkBtn : function(){
            if(this._currentState<=0)this._backwardBtn.attr("disabled","disabled");
            else this._backwardBtn.removeAttr("disabled");

            if(!this._statesHistory[this._currentState+1])this._forewardBtn.attr("disabled","disabled");
            else this._forewardBtn.removeAttr("disabled"); 
        },
        _backward : function(btn){
            if(this._currentState<=0)return;
            this._currentState--;
            this._backwarded=true;
            // fb(this._statesHistory);
            this._render();
        },
        _foreward : function(btn){
            if(!this._statesHistory[this._currentState+1])return;
            this._currentState++;
            this._render();
        },
        _render : function(){
            this._checkBtn();
            this._renderingState = true;
            $(this).trigger('updateState', jQuery.extend(true, {}, this._statesHistory[this._currentState]));  
        },
    };

    //css utils fn

    jQuery.fn.cssNumber = function(prop){
        var v = parseInt(this.css(prop),10);
        return isNaN(v) ? 0 : v;
    };

    //get css positionning properties from an event $div (see EventCollection.getDivById) 
    function getProp(elem){
        return {
          y: $(elem).cssNumber("top"),
          x: $(elem).cssNumber("left"),
          w: $(elem).cssNumber("width"),
          h: $(elem).cssNumber("height")
        };
    }

  </script>    
	
{% endblock javascripts %}

