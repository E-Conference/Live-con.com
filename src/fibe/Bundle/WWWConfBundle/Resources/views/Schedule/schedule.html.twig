{% extends 'fibeWWWConfBundle::base.html.twig' %}


{% block title %}Schedule{% endblock title %}

{% block content %}


{% block sideBarPanel%} 
 {{ parent() }}

{% endblock %}


<div class="content" id="schedule-view">
  <div class="row">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-9">
        <div id='calendar'></div> 
    </div>
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-3">
      <div id="sidebar">  
        {# <div class="checkbox">
          <label>
            <input id="reposition" checked="checked" type="checkbox"> Reposition parent/child <small>(<i>need performance</i>)</small>
          </label>
        </div> 
        <div class="history ">
          <button id="backwardBtn" class="btn btn-default" disabled="disabled" ><i class="icon-undo"></i></button>
          <button id="forewardBtn" class="btn btn-default" disabled="disabled" ><i class="icon-repeat"></i></button>
        </div> #}
        {# <div id="resourceView">
            <select class="form-control"> 
                <option value="classic">Calendar</option> 
                <optgroup label="Ressources views">
                  <option value="location" >Location</option> 
                  <option value="category" >Category</option>
                </optgroup>
            </select>
        </div> #}
        <div id="filters">  

          <h4>Filter by categories</h4>
          <div class="filter">
            <select multiple class="form-control" data-filter="category_ids">
              {% for category in categories %}
                <option data-color="{{category.color}};" value="{{category.id}}">{{category.name}}</option>
              {% endfor %}
            </select>
          </div>

          <h4>Filter by locations</h4>
          <div class="filter">
            <select multiple class="form-control" data-filter="location_ids">
              {% for location in locations %}
                <option value="{{location.id}}">{{location.name}}</option>
              {% endfor %}
            </select>
          </div> 

          <h4>Filter by topic</h4>
          <div class="filter">
            <select multiple class="form-control" data-filter="topic_ids">
              {% for topic in topics %}
                <option value="{{topic.id}}">{{topic.name}}</option>
              {% endfor %}
            </select>  
          </div>
        </div>

        <h4>Dateless Events</h4>
        <div id='external-events' class='scroller'>
        </div> 
      </div>  
    </div>
  </div>


  <div id="modal"  class="modal">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
          <h3 class="modal-title">Edit event</h3>
        </div>
        <div class="modal-body">
          <p>One fine body&hellip;</p>
        </div> 
      </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
  </div><!-- /.modal -->
   
  <div id="modal-new-event"  class="modal">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
          <h3 class="modal-title">Event creation</h3>
        </div>
        <form>
          <div class="modal-body">
            <div class="input-group input-group-lg"> 
              <input name="name" id="name" type="text" class="form-control input-lg" placeholder="Give me a name!">
            </div> 
          </div>
          <div class="modal-footer">
            <a  class="btn btn-default" data-dismiss="modal">Close</a>
            <button type="submit" class="btn btn-primary">Save changes</button>
          </div>
        </form>
      </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
  </div><!-- /.modal -->
   
  <div id="modal-set-parent"  class="modal">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
          <h3 class="modal-title">  
            <span class="fa-stack fa-lg">
              <i class="fa fa-square-o fa-stack-2x"></i>
              <i class="fa fa-sitemap fa-stack-1x"></i>
            </span>
            Affect parent
          </h3>
        </div>
        <div class="modal-body"> 
          Set 
          <p class="sub-event event-name well"></p> 
          as sub event of 
          <p class="super-event event-name well"></p>
          ?
        </div> 
        
        <div class="modal-footer row-fluid">
          <div class="col-xs-6"><button class="col-md-6 btn btn-default btn-block no" data-dismiss="modal"><i class='fa-remove'></i> no</button></div>
          <div class="col-xs-6"><button class="col-md-6 btn btn-success btn-block yes" data-dismiss="modal"><i class='fa-ok'></i> ok</button></div>
        </div>

      </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
  </div><!-- /.modal -->
</div>


{% endblock %}



{% block stylesheets_page %}
  <link href="{{ asset('bundles/fibewwwconf/js/fullcalendar/fullcalendar.css') }}" rel='stylesheet' />
  <link href="{{ asset('bundles/fibewwwconf/js/fullcalendar/fullcalendar.print.css') }}" rel='stylesheet' media='print' /> 
  <link href="{{ asset('bundles/fibewwwconf/css/fullcalendarAddedUI.css') }}" rel='stylesheet'/>  
  <link href="{{ asset('bundles/fibewwwconf/css/jquery.mCustomScrollbar.css') }}" rel='stylesheet'/>  
{% endblock stylesheets_page %}



{%  block javascripts_page %}
  <script src="{{ asset('bundles/fibewwwconf/js/moment.min.js') }}" type="text/javascript" ></script>
       
  <script type="text/javascript" src="{{ asset('js/jquery-ui.custom.js') }}"></script>
  <script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/fullcalendar.js') }}"></script>

  <script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/added/filter.js') }}"></script>
  <script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/added/sidebar.js') }}"></script>

  <script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/added/CalEvent.js') }}"></script>
  <script src="{{ asset('bundles/fibewwwconf/js/fullcalendar/added/EventCollection.js') }}"></script>
    
  <script src="{{ asset('bundles/fibewwwconf/js/jquery.mCustomScrollbar.concat.min.js') }}"></script>
  <script type="text/javascript">
    var Events = {}; // every events hashmap (calendar and sidebar)
    var calendar_events   = []; //calendar evnt array
    var calendar_events_indexes   = {};  // calendar event indexes
    var mainConfEvent; // the main conf event
    var dragged = null; //the last dragged object
    var $sidebar; //$div containing the sidebar
    var $calendar; //$div containing the calendar
    var stopRender = false; //$div containing the sidebar
    var fetched = false; // are the event fresh in memory ? if not nwe need a fetch request
    var firstWeekDay = 1; // avoid first day to be sunday
    var firstDay = moment('{{currentConf.mainConfEvent.startAt|date("Y-m-d")}}'); // supposed to point the first mainconfevent day

    var logtime; // global benchmark var
    //path
    var DATA_FEED_URL = "{{ path('schedule_view_event_get') }}";
    var op = {  
        getOrderedUrl     : "{{ path('exporter_api', { 'entity_reference': 'schedule_event','_format': 'json' }) }}?conference_id={{currentConf.id}}",
        getDatalessUrl     : "{{ path('exporter_api', { 'entity_reference': 'schedule_event','_format': 'json' }) }}?only_instant=whatever&conference_id={{currentConf.id}}",
        updateUrl     : "{{ path('schedule_view_event_edit') }}", //event modal form
        quickAddUrl   : DATA_FEED_URL + "?method=add", 
        quickUpdateUrl: DATA_FEED_URL + "?method=update",
        quickDeleteUrl: DATA_FEED_URL + "?method=remove", 
        resFeedURL    : "",
        data          : {} // request parameters
    }; 
    var startView = "agendaWeek";
    // //top right button
    // var isClassicView = true;
    // var viewBtns = {
    //   month:{
    //     classic:"month",
    //     resource:"resourceMonth",
    //     elem:$('<span class="fc-button fc-state-default fc-corner-left" unselectable="on">month</span>')},
    //   week:{
    //     classic:"agendaWeek",
    //     resource:"resourceWeek",
    //     elem:$('<span class="fc-button fc-state-default fc-state-active" unselectable="on">week</span>')},
    //   day:{
    //     classic:"agendaDay",
    //     resource:"resourceDay",
    //     elem:$('<span class="fc-button fc-state-default fc-corner-right" unselectable="on">day</span>')},
    // };

    // resources view
    // var startView = "week"; 
    // var resConfig = {
    //   location : {
    //     url : "{{ path('exporter_api', { 'entity_reference': 'schedule_location','_format': 'json' }) }}?conference_id={{currentConf.id}}",
    //     parse : function(e){ 
    //       if(e.location && e.location.id!= ""){
    //         return e.location.id;
    //       }else{
    //         return "other";
    //       }
    //     }
    //   },category : {
    //     url : "{{ path('exporter_api', { 'entity_reference': 'schedule_category','_format': 'json' }) }}?conference_id={{currentConf.id}}",
    //     parse : function(e){
    //       console.log(e)
    //       if( e.categories && e.categories.length < 1) return "other" ; 
    //       for(var i in e.categories){
    //         var c = e.categories[i];
    //         rtn.push(c.id);
    //       } 
    //       return rtn;
    //     }
    //   }
    // };
    // var currentRes = "location";

    $(document).ready(function() {    

      //init $ vars
      var $modal = $('#modal').hide();
      var $modalNewEvent = $('#modal-new-event').hide().draggable({ handle: ".modal-header" });
      var $modalSetParent = $('#modal-set-parent').hide().draggable({ handle: ".modal-header" });
      var $modalBody = $modal.find(".modal-body");
      
      $calendar = $('#calendar');
      $sidebar = $('#external-events'); 
      
      var initing = true; 

      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------- render events from json datasource -----------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/
   
 
      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- fullcalendar options ------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/
      calendarOption = { 
          header: {
              left: 'prev,next',
              center: 'title',
              right: 'month,agendaWeek,agendaDay' // computed in resource view
          },   
          aspectRatio: 1.6,
          firstDay: firstWeekDay,         
          year: firstDay.year(), 
          month: firstDay.month(),
          date: firstDay.date(), 
          // resources : resConfig[currentRes].url,
          //get events
          // viewRender : function(a,b,c,d,e,f,g){ 
          //   startView =a.name;
          // },
          events : function(start, end, callback) { 
              
              if(fetched === true ){
                //events have already been fetched
                fetched = false;
                stopRender = false;  
                // console.log("fetched",calendar_events_indexes) 
                // console.log(calendar_events)
                console.log("########fullcalendar rendering "+calendar_events.length+" events")

                logtime = moment();
                callback(calendar_events ); 
                console.debug(moment().diff(logtime)+" for fullcalendar to render"); 
                logtime = moment();
                return;
              } 
              //compute dates to filter
              if(initing){ 
                op.data['before']=moment(firstDay).endOf('week').add("days",firstWeekDay).format();
                op.data['after']=moment(firstDay).startOf('week').add("days",firstWeekDay-1).format();
                initing = false;
              }else{
                op.data['before']=moment(end).format();
                op.data['after']=moment(start).format();
              }
                console.log("########fetching")
              
              $.get(
                op.getOrderedUrl,
                op.data,
                function(events) {  
                    // if(stopRender===true)return;
                    console.log(events) 
                    if(events.length!=0)bootstrapAlert("success",events.length+" events have been well fetched" );
                    else {bootstrapAlert("info","no event found");}

                    logtime = moment();

                    // Events = {};

                    //initialize events
                    calendar_events   = []; 
                    calendar_events_indexes   = {};  

                    // var orphanChildren= [];
                    //non-blocking loop over events[i]
                    var i = 0;
                    if(events[i])setTimeout(doWork, 1);
                    function doWork() {
                      
                      var known = !!Events[events[i].id];
                      var event = new CalEvent(events[i]);
                      if(!known)event.computeCountRange();

                      if(event.mainconfevent){
                        mainConfEvent = event;
                        if(mainConfEvent.parent.id != ""){
                          mainConfEvent.persist();
                        } 
                      }   

                      i++; 

                      //last iteration  
                      if (!events[i]) { 
                        fetched = true;  
                        console.debug(moment().diff(logtime)+" to init"); 
                        EventCollection.refetchEvents(false,true);
                      }else if (stopRender!==true){ 
                        //the loop goes on
                        setTimeout(doWork, 1);
                      }
                    }; 
                    //$calendar.fullCalendar('renderEvent',e  ); // 3rd arg make the event "stick" 
                },
                'json'
              ).error(function(jqXHR, textStatus, errorThrown) {
                bootstrapAlert("warning","there was an error during the fetch of events",""); 
              });
              bootstrapAlert("info","event request sent","","<i class='fa-2x fa fa-spinner fa-spin'></i>");
          },
          eventAfterAllRender: function( view ) { 
              //avoid repeating this function 10 times... 
              if(!mainConfEvent || stopRender)return;
              clearTimeout(repositionTimeout);
              repositionTimeout=setTimeout(function(){    
                logtime = moment()
                  updateEventArray();  
                  stylizeBlock();
                console.debug(moment().diff(logtime)+" to updateEventArray & stylizeBlock"); 
                console.log( "######################################################"); 
              },repositionTime);
                  
          }, 
          eventCalculateWidth : function(event, seg, leftmost, availWidth, outerWidth, levelI, bottom, top, forward, dis,view) {  
            if(event.allDay){
              return;
            }
            // alert(startView)
            var width = availWidth 
                        + ( $calendar.fullCalendar('getView').name == "agendaDay" ? 30 : 10 );
            var height = bottom - top;
            var left = leftmost;
            var zindex = 8;

            var Hmargin = 5;
            var Wmargin = 2;
            try{

                //go to the parent place
                var parentId = event.parent.id,
                    count    = EventCollection.broCountRange[event.id].count,
                    range    = EventCollection.broCountRange[event.id].range
                    shifted  = false; 
 
                while(!Events[parentId].allDay){ 
                    var parentCount   = EventCollection.broCountRange[parentId].count,
                        parentRange   = EventCollection.broCountRange[parentId].range; 

                    range += (parentRange*count);
                    count *= parentCount;
                     
                    // width-=Wmargin*2;
                    left+=Wmargin; 
 
                    if(moment(Events[parentId].start).isSame(moment(event.start))){
                      top    += Hmargin/2;
                      height -= Hmargin/2;
                    } 
                    if(moment(Events[parentId].end).isSame(moment(event.end))){ 
                      height -= Hmargin;
                    }
                    // height -= (2*Hmargin);

                    zindex +=100

                    parentId = Events[parentId].parent.id;
                }


                width = width/count;
                left = left+(width*range);


                seg.outerWidth = width;
                seg.left = left;
                seg.outerHeight = height;
                seg.top = top;
                seg.zindex = zindex;
            }catch(e){
              console.warn("broCountRange not computed for "+event.id) 
            }
          },
          eventAfterRender : function( event, element, view ) {
            if(Events[event.id].hide === true)
              $(element).hide();
          },


      {% if authorized == 1 %} //editing function that require schedule flag
          editable: true,
          eventClick: function(calEvent, jsEvent, view) {  // get the full edit form
              $.ajax({
                  url: op.updateUrl+"?id="+calEvent.id,  
                  success: function(doc) {
                      $modalBody.html(doc);
                      bootstrapAlert("success","Options for event : <b>"+calEvent['title']+"</b> has been well fetched"); 

                      $modal.off('shown.bs.modal').on('shown.bs.modal', function () {
                        $modal.off('hidden.bs.modal');

                          // rerender if changed
                        var rerender = function(){    
                          $modal.on('hidden.bs.modal', function () {
                            setTimeout(function(){EventCollection.resetEvents()},10); 
                          })
                        }

                        //refetch if changed
                        $modalBody.find("form").each(function(){
                          $(this).submit(function(){
                            rerender();
                          })
                        }) 
                        //refetch if changed
                        $modalBody.find("a").click(function(){
                            rerender();
                        }) 
                        // close and refetch event 
                        $modalBody.find("#eventForm, #delete-event-form").each(function(){
                          $(this).submit(function(){
                            rerender();
                            $modal.modal("hide");
                          })
                        }) 
                      }) 
                      $modal.modal("show");
                  }
              }); 
              bootstrapAlert("info","edit <b>"+(calEvent['title'] || calEvent['name'])+"</b> request sent","Info : ","<i class='fa-2x fa fa-spinner fa-spin'></i>");  
          },
          selectable: true,
          selectHelper: true,
          select: function(start, end, allDay) { //new event
              $modalNewEvent.off('shown.bs.modal').on('shown.bs.modal', function() {
                                $(this).find("#name").val("").focus();
                            })
                            .modal("show");

              $modalNewEvent.find("form").off("submit").submit(function(e){
                var title = $(this).find("#name").val();
                if (title) {
                    var tmp = {
                        title    : title,
                        parent   : {id:mainConfEvent.id},
                        children : [],
                        start    : start,
                        end      : moment(start).isSame(moment(end)) ? moment(start).add("hours",1).format() : end,
                        allDay   : allDay
                    }; 
                    console.log(tmp);

                    $.post(
                        op.quickAddUrl,
                        $.extend( {} , tmp ),
                        function(response) {  
                            bootstrapAlert("success","event <b>"+tmp['title']+"</b> has been well added");
                            tmp.id =response.id;
                            var ev = new CalEvent(tmp);   
                            ev.setParent(mainConfEvent)  
                            ev.renderForRefetch(); 
                            ev.computeCountRange({allBrosInDay:true});  
                            if(response.mainConfEvent){
                              EventCollection.updateMainConfEvent(response.mainConfEvent.start,response.mainConfEvent.end); 
                            }  
                            EventCollection.refetchEvents(); 
                        },
                        'json'
                    ).fail(function(a,b,c) { 
                      bootstrapAlert("warning","Could not have been able to add the event.",c+" : "); 
                    });
                    bootstrapAlert("info","add request sent","Info : ","<i class='fa-2x fa fa-spinner fa-spin'></i>");
                    $modalNewEvent.modal("hide");
                }else{
                    bootstrapAlert("info","You must give a name to the event");
                    $modalNewEvent.find("#name").focus();
                }
                return false;
              });
              // $calendar.fullCalendar('unselect');
              
          },
          //resizing events in calendar (only the end date is changing)
          eventResize: function(event,dayDelta,minuteDelta,revertFunc){ 

              var oldEnd = moment(event["end"]).subtract({'d':dayDelta,'m':minuteDelta});

              setTimeout(function(){   
                  console.log(dayDelta,minuteDelta,event); 
                  if(!event.isOneDayLong() && !event.allDay){ 
                    // event.allDay = true;
                    event.fitToDay( event["start"],oldEnd.format());  
                  }

                  event.updateParentDate();
                  event.updateChildrenDate(); 
     
                  event.computeCountRange({allBrosInDay:true}); 
                  event.renderForRefetch();

                  EventCollection.refetchEvents(false,true);
                  event.persist(); 
              },0);
          },
          
          droppable: true, // allows things to be dropped into the calendar
          drop: function(date, allDay) { //drop from SIDEBAR
          
              // retrieve the dropped element's stored Event Object 
              var event = dragged[1]; 
              // var event = $.extend({},dragged[1]);  
              if(event.elem)event.elem.remove();
              // delete event.elem;
              event.allDay = allDay;
              event['start'] = date;


              // event = new CalEvent(event); 
              console.log("dropped from sidebar", event);
              // assign it the date that was reported
              
              // e['end'] = moment(date).add("hours",1).format();

              event.SetRecurDate();
              // event.deleteParent();
              Events[event.id] = event;

              event.setParent(mainConfEvent);
              event.updateParentDate(); 
              event.computeCountRange({allBrosInDay:true});
              event.renderForRefetch();
              EventCollection.refetchEvents();
              event.persist();
              // render the event on the calendar  
          },

          eventDragStart: function( event, jsEvent, ui, view ) { 
              dragged = [ ui.helper[0], event ];
              setTimeout(function(){   
                dragChildren(event, jsEvent, ui, view);
              },1);
          },
          eventDragStop: function( event, jsEvent, ui, view ) {  
              // var parent = EventCollection.find(event.parent.id,{noSidebar:true});  
              var event = Events[event.id]
              var parent = EventCollection.find(event.parent.id,{noSidebar:true}); 
              var children = EventCollection.getChildren(event,{concat:true,onlyEvent:true}); 
              
              //compute old day too 
              //TODO put this in dragstart 
              event.computeCountRange({allBrosInDay:true});  
              //TODO : parent  has here a wrong start/end updated from somewhere and need to be computed back :S 
              //TODO : parent  has here a wrong start/end updated from somewhere and need to be computed back :S  
              dragged = [ ui.helper[0], 
                          event, 
                          {start:moment(event.start), end:moment(event.end)},
                          (parent?{start:moment(parent.start),end:moment(parent.end)}:{}),
                          $(children).map(function(){return {start:moment(this.start),end:moment(this.end)};})
                        ];  
  
              setTimeout(function(){  
                  // event.computeCountRange({allEventsInDay:true}); 
                  //TODO : parent  has here a wrong start/end updated from somewhere and need to be computed back :S 
                  //TODO : parent  has here a wrong start/end updated from somewhere and need to be computed back :S 

                  var event = dragged[1];
                  var diff = moment(dragged[2].start).diff(moment(event['start']));
                  if(!dragged[1].allDay && diff==0)return;

                  var parent = EventCollection.find(event.parent.id,{noSidebar:true});

                  stopRender = true;
                  //get diff
 
                  //apply to children   
                  var childrenDates = dragged[4]; 
                  var children = EventCollection.getChildren(event,{concat:true,onlyEvent:true});
                  $.each(children,function(i,child){ 
                    child['start']  = moment(childrenDates[i]['start']).subtract(diff);
                    child['end']  = moment(childrenDates[i]['end']).subtract(diff);
           
                    child.computeCountRange();
                    child.renderForRefetch();
                    child.formatDate() 
                    child.persist()  
                  });  
 
                  //apply to parent 
                  if(parent){
                    var parentDate = dragged[3];
                    parent.start = parentDate.start.format(); 
                    parent.end = parentDate.end.format(); 
                    if(event.isOutOf(parent,true)){
                      //event dropped out of parent
                      console.log(" #### moved out ####");  
                      event.setParent(mainConfEvent); 
                    } 
                  event.updateParentDate();  
                  }
                  event.computeCountRange({allBrosInDay:true});
 
                  EventCollection.refetchEvents(); 
                  event.persist(); 

              },1);

 
          },
      {% endif %}{# end autorized #}
      };

      //launch calendar
      $calendar.fullCalendar(calendarOption);  
      $calendar.fullCalendar('changeView', startView );

      //additional schedule controls : first day and refresh
      $('.fc-header-left')
          .append(
            $('<span class="fc-header-space"></span><button class="fc-button fc-state-default fc-corner-left fc-corner-right"> First day</button>')
              .click(function(e){ 
                $calendar.fullCalendar( 'gotoDate', firstDay.year(), firstDay.month(), firstDay.date() ) 
                EventCollection.refetchEvents();
              })
          ).append(
            $('<span class="fc-header-space"></span><button class="fc-button fc-state-default fc-corner-left fc-corner-right"><span class="fa fa-refresh"></span></button>')
              .click(function(e){ 
                EventCollection.resetEvents();
              })
          );


      /*-------------------------------------------------------------------------------------------------*/
      /*------------------------------------- update function -------------------------------------------*/
      /*-------------------------------------------------------------------------------------------------*/

      /**
       * function triggered when all events have been rendered 
       */
      function updateEventArray(){ 

          var startScript = moment();
          // calendar_events = [];
          var calendarEvents = $calendar.fullCalendar('clientEvents'); //loop only on calendar events

          for (var i in calendarEvents){
            var calendarEvent = calendarEvents[i];
            if(Events[calendarEvent.id]){
              Events[calendarEvent.id] = calendarEvent;
            } 
          } 
          var foundElem = []; 
          $(".fc-event:visible").each(function(i){ 
            var id = parseInt($(this).data("id"));  
            foundElem.push(id)
            if(Events[id])Events[id]['elem'] = $(this);
          });
      }


      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- position ------------------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/ 

      /**
       *  add UI (popover, border color etc...)
       *  just after to the fullcalendar "all event render" function
       */
 
      var repositionTime = 0;
      var repositionTimeout; 
      function stylizeBlock(){ 
          var popoverWidth = 276;
          var dragOverEvents = []; 
          var currentDragOverEvent = null;
            // console.log("stylizeBlocks : ",events);
                /*****************  styling (opacity, hover, drag, drop) ********************/

            var calendarEventsIds = EventCollection.getIds($calendar.fullCalendar('clientEvents'));
            for (var i in Events){
                var event = Events[i]; 

                var element = event.elem; 
                if(!element)  continue; //event is in another view

                //action on hovered by another dragging event  
                element.data("border-color",element.css("border-color"))
                       // .data("background-color",element.css("background-color"))
                       .data("prop",getProp(element)); 

                
                if($.inArray(event.id, calendarEventsIds) !== -1 ){ //stylize only event in the calendar

                    /*************** popover *****************/
                    element.popover({
                        trigger : 'hover',
                        html : true,
                        placement : function( context,source){
                          var popoverProp = getProp($(context));
                          var eventProp = getProp(source);
                          var calendarProp = getProp($calendar);
                          // console.log(popoverProp,eventProp,calendarProp)
                          if(eventProp.x + eventProp.w + popoverWidth < calendarProp.x + calendarProp.w )
                            return "right";
                          if(eventProp.x - popoverWidth > calendarProp.x)
                            return "left";
                          return "bottom";
                        },
                        title : ' <b><span class="muted">#'+event.id+'</span> '+event.title+'</b>',
                        content : event.getPopoverContent(),
                    });

          {% if authorized == 1 %}
                    //the main conf event isnt resizable
                    if(event.id==mainConfEvent.id){
                      element.find(".ui-resizable-handle").remove();
                    }
                    //droppable = set as child
                    element.droppable({ 
                        tolerance: "pointer" ,
                        over: function( ev, ui ) {
                          if ( $(ui.draggable).hasClass("fc-event") ){ 
                              var event = EventCollection.getEventByDiv($(this));
                              var draggedEvent = dragged[1];

                              //check if it's going to do a loop in the tree
                              if(event.isChild(draggedEvent)){
                                return;
                              }

                              if(currentDragOverEvent)currentDragOverEvent.elem.removeClass("drag-over-events");

                              currentDragOverEvent = {id:event.id,elem:$(this)};  
                              dragOverEvents.push(currentDragOverEvent);
                              if(draggedEvent.parent.id !== event.id) currentDragOverEvent.elem.addClass("drag-over-events")  
                              
                          }
                        },
                        out: function( ev, ui ) { 
                          if ( $(ui.draggable).hasClass("fc-event") ){
                              // $(this).animate({"background-color":$(this).data("background-color")},{queue:false});
                              $(this).removeClass("drag-over-events")
                              var event = EventCollection.getEventByDiv($(this));

                              for(var i in dragOverEvents){
                                if(dragOverEvents[i].id == event.id){
                                  dragOverEvents.splice(i,1); 
                                }
                              }
                              if(dragOverEvents.length>0){
                                currentDragOverEvent = dragOverEvents[dragOverEvents.length-1]; 

                                // if(dragged[1].parent.id !== event.id)
                                  currentDragOverEvent.elem.addClass("drag-over-events");
                              }
                          }
                        },
                        drop: function( ev, ui ) { 
                          if ( $(ui.draggable).hasClass("fc-event") &&  currentDragOverEvent){  
                            
                              var event = Events[currentDragOverEvent.id];
                              if(currentDragOverEvent.id === event.id){
                                currentDragOverEvent.elem.removeClass("drag-over-events");
                                dragOverEvents = []; 
                                currentDragOverEvent = null;
                              } else {
                                return;
                              }

                              var draggedEvent = dragged[1]; 
                              // check if it's not already a child
                              if(draggedEvent.parent.id === event.id){
                                return;
                              }  
                              //check if it's going to do a loop in the tree
                              if(event.isChild(draggedEvent)){ 
                                return;
                              }  
                              console.log(event)
                              console.log(draggedEvent)

                              // if(event.isOutOf(draggedEvent))return;  
                              
                              setTimeout(function(){   

                                $modalSetParent.modal('show').find(".sub-event").text(draggedEvent.title);
                                $modalSetParent.find(".super-event").text(event.title);

                                $modalSetParent.find('button.yes').off("click").click(function(){ 
                                    //set event as parent of draggedEvent and children relation
                                    console.log(draggedEvent+" is now the child of "+event.id)
                                    
                                    draggedEvent.computeCountRange({allBrosInDay:true});
                                    draggedEvent.setParent(event);
                                    draggedEvent.updateParentDate(); 
                                    
                                    draggedEvent.renderForRefetch();
                                    draggedEvent.computeCountRange({allBrosInDay:true});

                                    event.renderForRefetch();
                                    event.computeCountRange({allBrosInDay:true});
                                    EventCollection.refetchEvents();
                                     
                                    draggedEvent.persist(); 
                                });    
                              },0); 

                          }
                        }
                    }); 
          {% endif %}   
              }//end stylize only event in the calendar

              /*************** hover : change border color and fade children *****************/
              element.hover(function(){
                    //enter
                    $(this).animate({"border-color":"#3F3F3F"},{queue:false});

                    var elemEvent = EventCollection.getEventByDiv($(this));
                    var childrenDiv = EventCollection.getChildren(elemEvent,{concat:true,onlyEvent:true});
                    for (var j in childrenDiv){
                      var curChildDiv = childrenDiv[j].elem;
                      if(!curChildDiv || childrenDiv[j].hide)continue;
                      curChildDiv.animate({opacity:0.3},{duration:'fast',queue:false});
                    }
                },function(){
                    $(this).animate({"border-color":$(this).data("border-color")},{queue:false})
                    var elemEvent = EventCollection.getEventByDiv($(this));
                    var childrenDiv = EventCollection.getChildren(elemEvent,{concat:true,onlyEvent:true});
                    for (var j in childrenDiv){
                      var curChildDiv = childrenDiv[j].elem;
                      if(!curChildDiv || childrenDiv[j].hide)continue;
                      curChildDiv.animate({opacity:1},{duration:'fast',queue:false})
                    }
                });    
              }
      }

      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- position ------------------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/




  {% if authorized == 1 %} 
      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- start/end drag ------------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/
 

      var draggedProp,draggedStart,children;

      //update the ui onMouseMove to make children follow the parent
      function dragChildren(event){
        // console.log(event['start'])
        // console.log(draggedProp)
        // console.log("parentElement",parentElement.text(),parentElement)
        children = EventCollection.getChildren(event,{concat:true}); 
        draggedStart = moment(event['start']); 

        // $.each(children,function(i,child){ 
        //   $(child.elem).fadeTo(200, 0.5);
        // });
        // console.log("lol ",children);

        //update helper
        var draggedProp = getProp(event.elem)
        $(event.elem).off("mousemove").mousemove( function(ev){ 
          var newdraggedProp = getProp(event.elem);
          var diff = { 
            x : (draggedProp.x - newdraggedProp.x) , 
            y : (draggedProp.y - newdraggedProp.y)
          };
          if(diff.x !== 0  || diff.y !== 0 ){
            draggedProp =  newdraggedProp;  

            $.each(children,function(i,child){
               // console.log(child)
              var childProp = getProp(child.elem);
              // console.log("lol ",childProp);
              $(child.elem).css("left",childProp.x-diff.x+"px")
                           .css("top" ,childProp.y-diff.y+"px");
            });
          }
        }); 
      } 
 



      /*-------------------------------------------------------------------------------------------------*/
      /*------------------------------------- initialize sidebar ----------------------------------------*/
      /*-------------------------------------------------------------------------------------------------*/
      
  {% endif %}   
      var sidebar = new Sidebar({% if authorized != 1 %}true{% else %}false{% endif %});
      sidebar.populate(op.getDatalessUrl);

  {% if authorized == 1 %} 
      //dropped from calendar to sidebar;
      $(sidebar).on("dropped",function(ev,calEvent){  
          console.log("dropped",calEvent)
          var event = Events[calEvent.id]; 
          

          //set as instant event 
          event['end'] = moment(event['start']);
          event.formatDate();
          // remove event from calendar 
          event.removeForRefetch();
              $calendar.fullCalendar('removeEvents',event.id);  
          // $calendar.fullCalendar('removeEvents',event.id); 
          event.persist();

          //affect children
          var children = EventCollection.getChildren(event, {concat:true,onlyEvent:true} ); 
          $.each(children,function(i,child){
              //set as instant event 
              child['end'] = moment(child['start']);
              child.formatDate();
              // remove event from calendar 
              child.removeForRefetch(); 
              $calendar.fullCalendar('removeEvents',child.id);  
              sidebar.setSidebarEvent(child,true); 
              child.persist();
          });
          //set as sidebar draggable 
          sidebar.setSidebarEvent(event,true);
          EventCollection.refetchEvents(); 
      }).on("drag",function(ev,event){ 
          dragChildren(event);
      });  
  {% endif %}   

      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- initialize filters --------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/


      //init filters
      var filter = new initFilter(op.getOrderedUrl);
      $(filter).on("change", function(ev,key,val) { 
 
          
          bootstrapAlert("info","event request sent","","<i class='fa-2x fa fa-spinner fa-spin'></i>");
      }).on("changed", function(ev,ids){
        bootstrapAlert("success",ids.length+" events have been well fetched" );
        ids.push(mainConfEvent.id)
        var calendarEvents = $calendar.fullCalendar('clientEvents'); //loop only on calendar events 
        for(var i in calendarEvents){
          if($.inArray(calendarEvents[i].id, ids) === -1 ){ 
            Events[calendarEvents[i].id].elem.stop( true, true ).animate({ opacity: 0, "margin-top": "-10px" },
                                                      {duration:'slow',queue:false,complete:function(){$(this).hide()}});
            Events[calendarEvents[i].id]["hide"] = true;
          }else if(Events[calendarEvents[i].id].hide === true){
            Events[calendarEvents[i].id].elem.css("margin-top", "-10px");
            Events[calendarEvents[i].id].elem.stop( true, true ).show().animate({ opacity: 1, "margin-top": "0px" },
                                                             {duration:'slow',queue:false});
            Events[calendarEvents[i].id]["hide"] = false;
          }else{
            Events[calendarEvents[i].id].elem.show();
          }

        }
      });


      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- resources view ------------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/ 
      
      // initViewsBtns(viewBtns);
      // $('#resourceView select').change(function(e){ 
      //   isClassicView = $(this).val() == "classic";
      //   if(isClassicView){ //render the classic view   
      //     // $('.fc-event').remove();
      //     $calendar.fullCalendar('changeView', viewBtns[startView].classic );
      //     EventCollection.refetchEvents(); 
      //     // $calendar.fullCalendar( 'renderEvent', Events);
      //     // $calendar.trigger("stopRender");
      //     // fetch = false;
      //     // $calendar.fullCalendar('refetchEvents');   
      //   }else{ //render a resource view

      //     var resource = $(this).val();
      //       currentRes = resource;
      //     op.resFeedURL = resConfig[resource].url; 
      //     // $('.fc-event').remove();
      //     //  
      //     $calendar.fullCalendar('changeView', viewBtns[startView].resource );
      //     EventCollection.refetchEvents(); 
      //     // $calendar.fullCalendar('refetchEvents');
      //     // $calendar.fullCalendar('refetchResources');


          
      //     //seems to be useless...
      //     //can fetch resources but can't go back to classic view when we destroy calendar
      //     // $calendar.fullCalendar( 'destroy' ); 
      //     // $calendar.fullCalendar(calendarOption);


      //   }
      //   initViewsBtns(viewBtns); 
      // })
      // function initViewsBtns(viewBtns){
      //   for( var i in viewBtns){
      //     viewBtns[i].elem.appendTo(".fc-header-right").off("click").click({i:i},function(e){ 
      //             startView = e.data.i;
      //             $(this).siblings().removeClass("fc-state-active");
      //             $(this).addClass("fc-state-active"); 
      //             // EventCollection.refetchEvents();
      //             $calendar.fullCalendar('changeView', (isClassicView ? viewBtns[startView].classic : viewBtns[startView].resource)); 
      //     })
      //   }
      // }

      /*-----------------------------------------------------------------------------------------------------*/
      /*------------------------------------- History -------------------------------------------------------*/
      /*-----------------------------------------------------------------------------------------------------*/ 


    //   //render an Events array
    //   //TODO look at eventResize and eventDrop  revertFn 
    //   function renderHistory(events){
    //       console.log("renderHistory",events);
    //       Events = events;
    //       var instant_events   = []; 
    //       $calendar.fullCalendar( 'removeEvents');
    //       storeinHistory = false;
    //       for (var i in Events){
    //         var event = Events[i]; 
    //         if(events[i].isInstant()){
    //           instant_events.push(event);
    //         }else{ 
    //             $calendar.fullCalendar( 'renderEvent',event);
    //         } 
    //       }
    //       setInstantEvents(instant_events); 
    //   }

    //   //init history
    //   History.setForewardBtn($('#forewardBtn'))
    //          .setBackwardBtn($('#backwardBtn')); 
    //   $(History).on('updateState',function(ev,events){ 
    //     renderHistory(events);
    //   })
    });//end $(document).ready


    // var History = {
    //     _statesHistory : [],
    //     _currentState : -1,
    //     _backwarded : false,

    //     _backwardBtn : '',
    //     _forewardBtn : '',
        
    //     _forewardBtn : '',
    //     _renderingState : true,
    //     isRenderingStateFromHistory : function(){
    //       if(this._renderingState===true){
    //         this._renderingState = false;
    //         return true;
    //       }
    //       return false;
    //     },
    //     setBackwardBtn : function(btn){
    //       this._backwardBtn = $(btn);
    //       this._backwardBtn.click(function(){History._backward()}); 
    //       return this;
    //     },
    //     setForewardBtn : function(btn){
    //       this._forewardBtn = $(btn);
    //       this._forewardBtn.click(function(){History._foreward()});   
    //       return this;
    //     },
    //     storeState : function(model){
    //       console.log("history state stored");
    //       var state = jQuery.extend(true, {}, model); 
    //       var arraySplice = this._backwarded ? 2000 : 0; 
    //       this._backwarded = false;
    //       this._currentState++;
    //       this._statesHistory.splice(this._currentState,arraySplice,state);
    //       this._checkBtn();
    //       return this;
    //     },
    //     //pseudo private methods

    //     //disable btn
    //     _checkBtn : function(){
    //         if(this._currentState<=0)this._backwardBtn.attr("disabled","disabled");
    //         else this._backwardBtn.removeAttr("disabled");

    //         if(!this._statesHistory[this._currentState+1])this._forewardBtn.attr("disabled","disabled");
    //         else this._forewardBtn.removeAttr("disabled"); 
    //     },
    //     _backward : function(btn){
    //         if(this._currentState<=0)return;
    //         this._currentState--;
    //         this._backwarded=true;
    //         // fb(this._statesHistory);
    //         this._render();
    //     },
    //     _foreward : function(btn){
    //         if(!this._statesHistory[this._currentState+1])return;
    //         this._currentState++;
    //         this._render();
    //     },
    //     _render : function(){
    //         this._checkBtn();
    //         this._renderingState = true;
    //         $(this).trigger('updateState', jQuery.extend(true, {}, this._statesHistory[this._currentState]));  
    //     },
    // };

    //css utils fn

    jQuery.fn.cssNumber = function(prop){
        var v = parseInt(this.css(prop),10);
        return isNaN(v) ? 0 : v;
    };

    //get css positionning properties from an event $div (see EventCollection.getDivById) 
    function getProp(elem){
        return {
          y: $(elem).cssNumber("top"),
          x: $(elem).cssNumber("left"),
          w: $(elem).cssNumber("width"),
          h: $(elem).cssNumber("height")
        };
    }

  </script>    
	
{% endblock javascripts_page %}

