{% extends 'fibeExternalizationBundle::base.html.twig' %}

{% block title %}Import data{% endblock title %}
{% block stylesheets_page %}

        <style>
        #drop{
                border:2px dashed #bbb;
                -moz-border-radius:5px;
                -webkit-border-radius:5px;
                border-radius:5px;
                padding:25px;
                text-align:center;
                font:20pt bold,"Vollkorn";color:#bbb
        }
        .col-sm-12 > .panel {
            margin-top: 1.5em;
        }

        .popover {
          position: absolute;
          top: 0;
          left: 0;
          z-index: 1010;
          display: none;
          max-width: 600px;
          min-width: 300px;
          padding: 1px;
          text-align: left;
          white-space: normal;
          background-color: #ffffff;
          border: 1px solid #ccc;
          border: 1px solid rgba(0, 0, 0, 0.2);
          -webkit-border-radius: 6px;
             -moz-border-radius: 6px;
                  border-radius: 6px;
          -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
             -moz-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
                  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
          -webkit-background-clip: padding-box;
             -moz-background-clip: padding;
                  background-clip: padding-box;
        }
        </style>
    {% endblock %}
{% block centerPanel %}
    {{ parent() }}


    <div class="col-sm-12 col-md-12 col-lg-12">

        <h2 id="desc-header" class="text-info">Step 1 : Please select the file to import</h2>
        <div id="progress-header" class="progress progress-striped active">
          <div class="progress-bar progress-bar-success" role="progressbar" style="width: 5%;">
          </div>
        </div>

        <div id="page-data-file" class="page">
             <form id="datasetFileForm"  class="input-append">
                <label for="datasetFile"> 
                    Available XML input format are : 
                        <span class="badge badge-success" ><i class="fa fa-check" ></i>  XML</span>
                        <span class="badge badge-success"><i class="fa fa-check" ></i>  XLS</span>
                      
                    
                </label> 
                <div class="input-group">
    				   <span class="input-group-addon">File to import</span>
                        <input id="datasetFile" method="POST" action="/uploadDataset" class="form-control" name="datasetFile" value="Choose your file" type="file"/>
                        <div id="drop">Drag your file here</div>
                </div> 
            </form>  
            <h3 class="text-info">Action</h3> 
            <a  class="empty-conf btn btn-danger btn-xs" 
                {% if  wwwConf.isEmpty() %}
                disabled="disabled" 
                {% else %} 
                {% endif %}
                href="{{ path('schedule_conference_empty', { 'id': wwwConf.id }) }}"> 
                <i class="fa fa-trash-o"></i> Empty conference
            </a>

             <a href="{{path('externalization_import_xls')}}">Test xls import</a>
        </div>

        <div id="page-mapping-file" data-progress="20" data-desc="Step 2 : Please select a mapping file to use" class="page" style="display:none;">   
            <form id="form-known-mapping-format">
                <label>
                    Choose a known format : 
                </label><br/>
                <select id="known-mapping-format" required="false">
                    <option selected="selected" value="swc">RDF/OWL ( SWC / FOAF ontology ) </option>
                    <option value="ocs">OCS format</option>
                </select>
                <button type="submit" class="btn btn-default "><i class="fa fa-play"></i> Process import</button>
            </form>
            <br/>
            <label> 
                Or import your own format :
            </label> <br/>
             <select id="file-format" required="false">  
                    <option selected="selected" value="xml">xml</option> 
                    <option value="xlsx">xlsx</option> 
                </select>  
            <button id="new-mapping" class="btn btn-default "><i class="fa fa-plus"> </i>  New mapping file </button>
        </div>

        <div id="page-new-mapping-file" data-progress="35" data-desc="Step 3 : Please proceed to the mapping"  class="page" style="display:none;">
            <div style="margin: 15px;"> 
                <button id="submit-new-mapping" class="btn btn-success btn-lg"><i class="fa fa-play-circle"></i> Run your mapping </button>
            </div>
            <div id="datafile-form" class="col-sm-6 col-md-6 col-lg-6"></div>
            <div id="model-form"  class="col-sm-6 col-md-6 col-lg-6"></div>
        </div>   

        <div id="page-result" class="page" data-progress="70" data-desc="Final step : send us the dataset"  style="display:none;">
            <button id="back-to-mapping" style="display:none;" type="submit" id="send-data" class="btn btn-primary btn-lg "><i class="fa fa-arrow-left"></i> Back to the mapping </button>
            <button type="submit" id="send-data" class="btn btn-success btn-lg "><i class="fa fa-upload"></i> Send </button>
            <h3 class="text-info">Results</h3>
            <div id="result-extract"></div>
        </div>        
        <div id="page-conf-emptying" class="page" data-progress="80" data-desc="Emptying conference... "  style="display:none;">     
        </div>        
        <div id="page-conf-emptied" class="page" data-progress="90" data-desc="Conference emptied, now sending file... "  style="display:none;"> 
        </div>        
        <div id="page-end" class="page" data-progress="100" data-desc="You're done !"  style="display:none;"> 
            <h3 class="text-info">Results</h3>
            <div id="result-import"></div>
        </div>            
    </div>


	<!-- Modal -->
	<div class="modal fade" id="confirmModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	  <div class="modal-dialog">
	    <div class="modal-content">
	      <div class="modal-header">
	        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
	        <h3 class="modal-title" id="myModalLabel">Confirm empty</h3>
	      </div>
	      <div class="modal-body">
	        <form>
	          <div class="modal-body">
	            <h4 class="text-wrning">In order to confirm, type <b>Empty !</b> if you really want to empty the conference.</h4>
	            <div class="input-group input-group-lg"> 
	              <input name="confirmEmptyInput" id="confirmEmptyInput" type="text" class="form-control input-lg" value="Empty ?">
	            </div> 
	          </div>
	          <div class="modal-footer">
	            <a class="btn btn-default" data-dismiss="modal">Close</a>
	            <button type="submit" class="btn btn-primary">Save changes</button>
	          </div>
	        </form> 
	      </div>
	    </div><!-- /.modal-content -->
	  </div><!-- /.modal-dialog -->
	</div><!-- /.modal -->
   
 {% endblock %}


 {%  block javascripts_page %} 
        <script type="text/javascript" src="{{ asset('js/jquery-ui.custom.js') }}"></script>
        <script src="{{ asset('bundles/fibeexternalization/js/moment.min.js') }}" type="text/javascript" ></script> 

        <script src="{{ asset('bundles/fibeexternalization/js/importer/Pager.js') }}" type="text/javascript" ></script>
        
        <script src="{{ asset('bundles/fibeexternalization/js/importer/Importer.js') }}" type="text/javascript" ></script>
        <script src="{{ asset('bundles/fibeexternalization/js/importer/dbMapping/jsonModel.js') }}" type="text/javascript" ></script>

        <script src="{{ asset('bundles/fibeexternalization/js/importer/xmlImport/xmlMapper.js') }}" type="text/javascript" ></script>
        
        <script src="{{ asset('bundles/fibeexternalization/js/importer/xlsxImport/jszip.js') }}" type="text/javascript" ></script>
        <script src="{{ asset('bundles/fibeexternalization/js/importer/xlsxImport/xlsx.js') }}" type="text/javascript" ></script>
        <script src="{{ asset('bundles/fibeexternalization/js/importer/xlsxImport/xlsxMapper.js') }}" type="text/javascript" ></script>

        <script src="{{ asset('bundles/fibeexternalization/js/importer/xmlImport/rdf_config.js') }}" type="text/javascript" ></script>
        <script src="{{ asset('bundles/fibeexternalization/js/importer/xmlImport/ocs_config.js') }}" type="text/javascript" ></script>

        <script type="text/javascript" >

        var mapper = null;
        $(document).ready(function(){

            /*********      handle change page workflow  **********/
            Pager.initialize($("#page-data-file"));
            var dropDataFile             = document.getElementById('drop');
            var selectDataFile           = document.getElementById("datasetFile");  
            var formKnownMappingFormat   = document.getElementById("form-known-mapping-format");  
            var selectKnownMappingFormat = document.getElementById("known-mapping-format");  
            var selectFileFormat = document.getElementById("file-format");  
            var selectMappingFile        = document.getElementById("submit-new-mapping");   
            var newMappingFile           = document.getElementById('new-mapping'); 
            var backToMapping            = document.getElementById('back-to-mapping'); 
            var sendData                 = document.getElementById('send-data'); 
            if(dropDataFile.addEventListener) {
                dropDataFile.addEventListener('dragenter', handleDragover, false);
                dropDataFile.addEventListener('dragover', handleDragover, false);
                dropDataFile.addEventListener('drop', handleDataFileChange, false);
            }
            if(selectDataFile.addEventListener) {
                selectDataFile.addEventListener('change', handleDataFileChange, false);
            }
            if(newMappingFile.addEventListener) {
                newMappingFile.addEventListener('click', handleNewMappingFile, false);
            }
            
            if(formKnownMappingFormat.addEventListener) {
                formKnownMappingFormat.addEventListener('click', handleKnownMappingFormat, false);
            } 
            if(selectMappingFile.addEventListener) {
                selectMappingFile.addEventListener('click', handleImport, false);
            } 
            if(backToMapping.addEventListener) {
                backToMapping.addEventListener('click', handleBackToMapping, false);
            } 
            if(sendData.addEventListener) {
                sendData.addEventListener('click', handleSendSerializedConf, false);
            } 







            /*********       run the importer and send the serialized obj to php   **********/ 
            var ConfRdfFile; 


            ///confirm empty 
            $('.empty-conf').click(function(){
                confirmEmpty(function(){
                    window.location = "{{ path('schedule_conference_empty', { 'id': wwwConf.id }) }}";
                })
                return false;
            }); 
 
         }); 

        
        //confirm with a bootstrap modal then call (or not) callback
        function confirmEmpty(callback){ 
            $('#confirmModal').modal('show');
            $('#confirmModal').one('shown.bs.modal', function() {
                $(this).find("input").first().focus();
            }) 
            $('#confirmModal').find("form").one("submit",function(e){
                                    if($('#confirmEmptyInput').val() === "Empty !"){
                                        callback();
                                        $('#confirmModal').modal('hide');
                                        return false;
                                    }
                                    else{
                                        bootstrapAlert("info",' Conference clear cancelled.');
                                        $('#confirmModal').modal('hide');
                                        return false;
                                    }
                              });
        }
        //output results of import
        function getHtmlResultDiv(data,importedLog,notImportedLog,endMsg){
            var html='<div class="row"><div class="col-sm-4"><div class="panel panel-primary">\
                                                  <!-- Default panel contents -->\
                                                  <div class="panel-heading">'+(data.conference.setSummary?data.conference.setSummary:'Found datas')+'</div>';

                    html+= getMsgUl(xmlMapper.getSerialisedDatas(),endMsg || "found",true);

                    html+='</ul></div></div><div class="col-sm-4"><div class="panel panel-info">\
                                                  <!-- Default panel contents -->\
                                                  <div class="panel-heading">Imported properties : </div>\
                                                  <ul class="list-group">'; 
                    for(var i in importedLog){
                        html+= '<li class="list-group-item">'+importedLog[i]+"</li>";
                    } 

                    html+= '</ul></div></div><div class="col-sm-4"><div class="panel panel-info">\
                                                  <!-- Default panel contents -->\
                                                  <div class="panel-heading">Not imported properties : </div>\
                                                  <ul class="list-group">';
                    for(var i in notImportedLog){
                        html+= '<li class="list-group-item">'+notImportedLog[i]+"</li>";
                    }

                    return html + '</ul></div></div></div>';
        }
        // output imported object
        function getMsgUl(dataArray,endString,panelMode){
            var msg = "";
            // if(dataArray.conference.setAcronym)msg += dataArray.conference.setAcronym;
            // else if(dataArray.conference.setSummary)msg += dataArray.conference.setSummary;
            msg += "<ul"+(panelMode?' class="list-group" ':'')+">"; 
            for (var i in dataArray) 
                if(dataArray[i] && dataArray[i].length >0)
                    msg +="<li"+(panelMode?' class="list-group-item" ':'')+">"+dataArray[i].length +" "+i+" "+endString+" !</li>"

            return msg + "</ul>";
        }

        function extractDatas(mapping,op){
            if(!op)op={}; 

              Importer().run( xmlMapper["data"],mapping,op,function(data,importedLog,notImportedLog){
                    Pager.changePage('#page-result');
                    xmlMapper.setSerialisedDatas(data);
                    xmlMapper.setImportedLog(importedLog);
                    xmlMapper.setNotImportedLog(notImportedLog);

                    $("#result-extract").html(getHtmlResultDiv(data,importedLog,notImportedLog,"extracted"));
                    bootstrapAlert("success",getMsgUl(xmlMapper.getSerialisedDatas(),"extracted"),"conference parsed : "); 
                },function(msg)
                { 
                    bootstrapAlert("warning", msg || "there was an error during extraction of datas","Error :"); 
                    // console.log(Mapper["data"],mapping)
                }
            ); 
              
            // run( Mapper["data"],mapping,op,function(data,importedLog,notImportedLog){
            //         Pager.changePage('#page-result');
            //         Mapper.setSerialisedDatas(data);
            //         Mapper.setImportedLog(importedLog);
            //         Mapper.setNotImportedLog(notImportedLog);

            //         $("#result-extract").html(getHtmlResultDiv(data,importedLog,notImportedLog,"extracted"));
            //         bootstrapAlert("success",getMsgUl(Mapper.getSerialisedDatas(),"extracted"),"conference parsed : "); 
            //     },function(msg)
            //     { 
            //         bootstrapAlert("warning", msg || "there was an error during extraction of datas","Error :"); 
            //         // console.log(Mapper["data"],mapping)
            //     }
            // ); 
        }


        function handleKnownMappingFormat(e){
                e.stopPropagation();
                e.preventDefault(); 
 
                var mapping = xmlMapper.getKnownMapping($("#known-mapping-format").val()); 
                xmlMapper.read("#datafile-form");
                $("#back-to-mapping").hide();
                $(xmlMapper).on("fileRead",function(ev,data){
                     extractDatas(mapping)
                })
        }


         function handleDataFileChange(e) {

                e.stopPropagation();
                e.preventDefault();

                console.log("drop");
              
                Pager.changePage('#page-mapping-file');
                var file = "";
                if(e.dataTransfer){
                    file = e.dataTransfer.files[0];
                }else{
                    file = this.files[0];
                }
                xmlMapper.initialize(file);
                var worker = new Worker("{{ asset('bundles/fibeexternalization/js/importer/xlsxImport/xlsxWorker.js') }}");
                xlsxMapper.initialize(worker, file);
               
        }

        function handleDragover(e) {
                e.stopPropagation();
                e.preventDefault();
                e.dataTransfer.dropEffect = 'copy';
        }

        function handleBackToMapping(e){
                e.stopPropagation();
                e.preventDefault();
                Pager.changePage('#page-new-mapping-file');
        }

        function handleSendSerializedConf(e) {
                e.stopPropagation();
                e.preventDefault();
 
                    bootstrapAlert("info",' sending file...',"Info : ","<i class='fa-2x fa fa-spinner fa-spin'></i>");
                    sendSerializedConf(xmlMapper.getSerialisedDatas()); 

                //send file
                function sendSerializedConf(dataArray){
                    var data = {dataArray:JSON.stringify(dataArray)};
                    //DBimport
                    $.ajax({ 
                        type: "POST",
                        cache: false,  
                        url: "{{ path('schedule_admin_DBimport') }}",
                        data: data,
                        success:function(a,b,c)
                        {
                            Pager.changePage('#page-end');  
                            
                            $("#result-import").html(
                                getHtmlResultDiv(xmlMapper.getSerialisedDatas(),xmlMapper.getImportedLog(),xmlMapper.getNotImportedLog())
                            );
                            bootstrapAlert("success",getMsgUl(xmlMapper.getSerialisedDatas(),"imported"),"Conference imported : "); 
                        },
                        error:function(a,b,c)
                        {
                            bootstrapAlert("warning",'import failed because : '+c);
                            console.log(a)
                            console.log(b)
                            console.log(c) 
                        },
                    });
                }
        }


         function handleImport(e) {
                e.stopPropagation();
                e.preventDefault();
                var mapping = mapper.generateMappingFile(); 
                extractDatas(mapping);  
                $("#back-to-mapping").show();
        }

        function handleNewMappingFile(e) {

                e.stopPropagation();
                e.preventDefault();
 
                if($("#file-format").val() == "xml"){
                    mapper = xmlMapper;
                }else{
                    mapper = xlsxMapper;
                }

                Pager.changePage('#page-new-mapping-file');
                mapper.read("#datafile-form");
                $(mapper).on("fileRead",function(ev,data){
                    this.map( data);
                    Model.initialize(this);
                })


                Model.modelToTab($("#model-form")) ;
        }



         </script>   

{% endblock %}

